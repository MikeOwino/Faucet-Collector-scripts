
//==================//
//script Written by: ••AviramDayan•• 05/11/2018 17:00PM
//Last update - 28/03/2021 05:00AM - version 18
//==================//

using System;
using System.IO;
using System.Drawing;
using System.Linq;
using System.Threading.Tasks;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;

//css_ref FaucetCollector.Utilities
//css_inc RecaptchaUtilities


public class bitsler : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.bitsler.com/")  //https://www.bitsler.com/?ref=AviramDayan
            {
				
                new FaucetSetting(){Name="UserName",Display="UserName",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="WalletAddress",Display="Wallet Address (option)",Type=EditorType.TextBox,Required=false},
                //new FaucetSetting(){Name="DeleteCookies",Display="Delete Cookies - Sometimes solves problems in login area (Recommended)",Type=EditorType.CheckBox,Default=false},

				//new FaucetSetting(){Name="Menu_SiteLanguage",Display="Menu_SiteLanguage - Select Your Language",Type=EditorType.ComboBox,Default="en",Items=new System.Collections.Generic.List<string>{"en","es","fr","br","ru","tr","jp"}},

                new FaucetSetting() { Name = "ExclusiveBonusDrop_Telegram", Display = "Exclusive Bonus Drop - ON/OFF - in Telegram - 'bitsler.com - Play Smarter' - Public Channel", Type = EditorType.CheckBox, Default =true},	

                new FaucetSetting(){Name="FreeBtc",Display="FreeBtc - bitsler coin - ON/OFF",Type=EditorType.CheckBox,Default=false},
                new FaucetSetting(){Name="RakeBack",Display="RakeBack - ON/OFF - from Gold level",Type=EditorType.CheckBox,Default=false},
                new FaucetSetting(){Name="Nitro",Display="Nitro - ON/OFF - from Platinum level",Type=EditorType.CheckBox,Default=false},
				
				new FaucetSetting() { Name = "Rain_AirDrop_Chat", Display = "Rain_AirDrop_Chat - ON/OFF", Type = EditorType.CheckBox, Default = false},		
                new FaucetSetting(){Name="MessageChat",Display="Your Message In Chat - only need to be active to get any rain",Default = ".",Type=EditorType.TextBox,Required=false},
				
	            new FaucetSetting(){Name="AllGames_Menu",Display="AllGames_Menu - Select Favorite Game (Correctly available/working only 'Dice' game) ",Type=EditorType.ComboBox,Default="none",Items=new System.Collections.Generic.List<string>{"none","Dice","Roulette","Multicolor","CaraYcruz"}},
				new FaucetSetting(){Name="MenuCoins",Display="MenuCoins - Select Favorite Coins",Type=EditorType.ComboBox,Default="btc",Items=new System.Collections.Generic.List<string>{"btc","eth","xrp","ltc","usdt","doge","etc","bch","zec","dgb","eos","xlm","trx","dash","bsv","btg","neo","strat","kmd","lsk","qtum","waves","btslr"}},
				
				//Dice Game//
				new FaucetSetting(){Name="Dice_Amount_Input",Display="Dice - Amount",Default="0.00000001",Type=EditorType.TextBox,Required=true},
				new FaucetSetting(){Name="Dice_PayOut_Input",Display="Dice - Dice PayOut",Default=3,Type=EditorType.Numeric,Required=true},
				//new FaucetSetting(){Name="Dice_Chance_Input",Display="Dice - Dice Chance",Default=33,Type=EditorType.Numeric,Required=true},
				new FaucetSetting(){Name="Dice_NumberOfRoll",Display="Dice - Number Of Roll / Spins ",Default=15,Type=EditorType.Numeric,Required=true},
				new FaucetSetting() { Name = "Dice_break", Display = "Dice_break - when the BET numbers works - Choose after how much time you want to break inside 'while loop' - the default is 900sec = 15min", Type = EditorType.TextBox, Default = "900" },
				new FaucetSetting(){Name="Dice_Roll_UnderOver_Menu",Display="Dice Roll UnderOver - Select if you want to Roll 'Under' OR 'Over'",Type=EditorType.ComboBox,Default="none",Items=new System.Collections.Generic.List<string>{"none","Under","Over"}},
				new FaucetSetting(){Name="Dice_Speed_Level_Menu",Display="Dice Speed Level - Select Speed Level (4 Level in total) ",Type=EditorType.ComboBox,Default="Level_2",Items=new System.Collections.Generic.List<string>{"none","Level_1","Level_2","Level_3","Level_4"}},
				new FaucetSetting(){Name="Dice_Winning_Menu",Display="Dice | Winning - Select if you want to 'Return to base' OR 'Increase by' ",Type=EditorType.ComboBox,Default="Return to base",Items=new System.Collections.Generic.List<string>{"Return to base","Increase by"}},
				new FaucetSetting(){Name="Dice_Winning_Increase_Input",Display="Dice | Winning - Increase by",Default=3,Type=EditorType.Numeric,Required=true},
				new FaucetSetting(){Name="Dice_Losing_Menu",Display="Dice | Losing - Select if you want to 'Return to base' OR 'Increase by' ",Type=EditorType.ComboBox,Default="Return to base",Items=new System.Collections.Generic.List<string>{"Return to base","Increase by"}},
				new FaucetSetting(){Name="Dice_Losing_Increase_Input",Display="Dice | Losing - Increase by",Default=3,Type=EditorType.Numeric,Required=true},
	
				//Multicolor Game//
                new FaucetSetting(){Name="MulticolorGame_Counter",Display="MulticolorGame - Number Of Roll / Spins ",Default=15,Type=EditorType.Numeric,Required=true},

                new FaucetSetting(){Name="InfoAllCoins",Display="InfoAllCoins - Minimum amount to gamble -> BTC: from 0.00000001, ETH: from 0.00000010, LTC: from 0.00000050, BCH: from 0.00000005, XRP: from 0.00015000, DOGE: from 0.05000000, DASH: from 0.00000020, ZEC: from 0.00000025, ETC: from 0.00000500, NEO: from 0.00000200, STRAT: from 0.00003000, KMD: from 0.00004000, BURST: from 0.10000000, BTG: from 0.00000200, ISK: from 0.00001500, DGB: from 0.10000000, QTUM: from 0.00001000, WAVES: from 0.00003000, BSV: from 0.00000020, BTSLR: from 1.00000000",Default="InfoAllCoins - Minimum amount to gamble",Type=EditorType.Label,Required=false},
				
                new FaucetSetting(){Name="StarAmount",Display="Star | Amount",Default="0.00000001",Type=EditorType.TextBox,Required=true},
				new FaucetSetting(){Name="Star",Display="Star - on off",Type=EditorType.CheckBox,Default=false},	
				
                new FaucetSetting(){Name="RedAmount",Display="Red | Amount",Default="0.00000001",Type=EditorType.TextBox,Required=true},
				new FaucetSetting(){Name="Red",Display="Red - on off",Type=EditorType.CheckBox,Default=false},	
				
                new FaucetSetting(){Name="BlueAmount",Display="Blue | Amount",Default="0.00000001",Type=EditorType.TextBox,Required=true},
				new FaucetSetting(){Name="Blue",Display="Blue - on off",Type=EditorType.CheckBox,Default=false},	
				
                new FaucetSetting(){Name="YellowAmount",Display="Yellow | Amount",Default="0.00000001",Type=EditorType.TextBox,Required=true},
				new FaucetSetting(){Name="Yellow",Display="Yellow - on off",Type=EditorType.CheckBox,Default=false},	
				
                new FaucetSetting(){Name="GreenAmount",Display="Green | Amount",Default="0.00000001",Type=EditorType.TextBox,Required=true},
				new FaucetSetting(){Name="Green",Display="Green - on off",Type=EditorType.CheckBox,Default=false},	

                new FaucetSetting() { Name = "AffWithdraw", Display = "AffWithdraw", Type = EditorType.CheckBox, Default = false},	


                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

	

	
	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
	   
	    ad = false;	  
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "bitsler.com";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*";
        FailXPath = "//*";

        //General user time
        //TimerIsCountingUp = true;
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
	
	
bool ad;
	
	
    public override int DoInit()
    {	
	
		//if it's Checked
       if (GetBoolSetting("DeleteCookies"))
       {
		//Delete Cookies
		 Log("DeleteCookies - Checked");
         Driver.Manage().Cookies.DeleteAllCookies();
       } 
 
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
		
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        return ElementByXPath("//span[contains(@class,'username')] | //a[contains(text(),'Logout')] ") != null;  

        //return base.IsLoggedIn();
    }

//==================//
//save Login Cookies 
//==================//
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {


	 //var checks login or exit
     var ExitButton = ElementByXPath("//span[contains(@class,'username')] | //a[contains(text(),'Logout')] ") ;

	 //if i already Login - go to "bonus"	 
	 if (IsVisible(ExitButton))
	 {
        //if we already login go to here
        GoToUrl("https://www.bitsler.com/dashboard");
	 }	

	 
	 //============//
	 //Site Language
	 //============//

     var MenuOpen = ElementByXPath("//div[@class='na-burger open']");
     var MenuClose = ElementByXPath("//div[@class='na-burger']");
	 if (IsVisible(MenuClose))
	 {
	 Log("Menu - closed - we open it");
     Click(MenuClose);
	 }

	 if (IsVisible(MenuOpen))
	 {
	 Log("Menu - already - opened");		 
	 }
	 
     Wait(2);
	 
     var SiteLanguageTAB = ElementByXPath("//button[contains(@class,'btn-language')]/img[contains(@src,'flag')]");
	 if (IsVisible(SiteLanguageTAB))
	 {
     Click(SiteLanguageTAB);
	 Log("Click - SiteLanguageTAB");
	 }
	 
     var SiteLanguageTABOpen = ElementByXPath("//ul[@class='dropdown-menu dropdown-menu-right show']");	 
	 if (IsVisible(SiteLanguageTABOpen))
	 {

       var LanguageEnglish = ElementByXPath("//a[contains(text(),'English')]");
	   if (IsVisible(LanguageEnglish))
	   {  
       Click(LanguageEnglish);
	   Log("Click - LanguageEnglish"); 
	   }
	   
	 }	
	 //============//	 
	
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
	
	

//=============//
//start DoLogin
//=============//
    public override int DoLogin()
    {

     var ExitButton = ElementByXPath("//span[contains(@class,'username')] | //a[contains(text(),'Logout')] ");
	 if (!IsVisible(ExitButton))
	 {

		GoToUrl("https://www.bitsler.com/login");
        Wait();	
        Wait(2);	
		
        var box_user = ElementByXPath("//input[contains(@id,'user')]");
        if (!IsVisible(box_user))
        {
            return Fail("UserBox not found");
        }
        SetText(box_user, GetSetting("UserName"));
		
        Wait(2);
		
        var box_pass = ElementByXPath("//input[contains(@id,'password')]");
        if (!IsVisible(box_pass))
        {
            return Fail("Box pass not found");
        }
        SetText(box_pass, GetPassword("Pass"));

        Wait(2);
		
        Recaptcha_Function(); //call
		
        Wait(4);
	
        var ButtonLog = ElementByXPath("//div[contains(@id,'modal')]//button[contains(text(),'Login')] | //button[contains(text(),'Iniciar Sesión')] | //button[contains(text(),'Entrar')] | //button[contains(text(),'Логин')] | //button[contains(text(),'Giriş')] | //button[contains(text(),'ログイン')]");
        if (!IsVisible(ButtonLog))
        {
            return Fail("Button login not visible");
        }
        Click(ButtonLog);
		
        Wait();
		
        Recaptcha_Function(); //call
				
        Wait();
		
	 } //end ExitButton
	 
		
        //This faucet has nothing to do here.    
        return base.DoLogin();
    }
//=============//
//start DoLogin
//=============//
	

	
	
	
	
//==========//
//AfterLogin
//=========//
 public override int AfterLogin()
 {
	 

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
 }
//==========//
//AfterLogin
//=========//
	

	

//=============//
//GetFaucetWaitTime
//=============//
public override int GetFaucetWaitTime()
 {
        if (ad)
        {
	        ad = false;
			Log("GetFaucetWaitTime close");		
            return GetWaitSetting();
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
 }

//=============//
//GetFaucetWaitTime
//=============//
	

	

	
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	



//=============//
//DoSolveFaucet
//=============//
 public override int DoSolveFaucet()
 {

    
     //=============//
     //AffWithdraw
     //=============// 
     if (GetBoolSetting("AffWithdraw"))
     {
	 
		Log("AffWithdraw");

		GoToUrl("https://www.bitsler.com/en/affiliate");
        Wait();	
        Wait(2);	
	
        var btc_w_VAR = ElementByXPath("//tr[1]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(btc_w_VAR))
        {		
        Click(btc_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - btc");	
        }

        var eth_w_VAR = ElementByXPath("//tr[2]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(eth_w_VAR))
        {		
        Click(eth_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - eth");	
        }
		
        var ltc_w_VAR = ElementByXPath("//tr[3]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(ltc_w_VAR))
        {		
        Click(ltc_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call		
		Log("WithdrawEndButton - ltc");	
        }
		
        var bch_w_VAR = ElementByXPath("//tr[4]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(bch_w_VAR))
        {		
        Click(bch_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - bch");	
        }

        var xrp_w_VAR = ElementByXPath("//tr[5]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(xrp_w_VAR))
        {		
        Click(xrp_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - xrp");	
        }

        var doge_w_VAR = ElementByXPath("//tr[6]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(doge_w_VAR))
        {		
        Click(doge_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - doge");	
        }

        var dash_w_VAR = ElementByXPath("//tr[7]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(dash_w_VAR))
        {		
        Click(dash_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - dash");	
        }		

        var zec_w_VAR = ElementByXPath("//tr[8]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(zec_w_VAR))
        {		
        Click(zec_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - zec");	
        }

        var etc_w_VAR = ElementByXPath("//tr[9]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(etc_w_VAR))
        {		
        Click(etc_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - etc");	
        }

        var xlm_w_VAR = ElementByXPath("//tr[10]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(xlm_w_VAR))
        {		
        Click(xlm_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - xlm");	
        }

        var neo_w_VAR = ElementByXPath("//tr[11]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(neo_w_VAR))
        {		
        Click(neo_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - neo");	
        }

        var strat_w_VAR = ElementByXPath("//tr[12]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(strat_w_VAR))
        {		
        Click(strat_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - strat");	
        }

        var kmd_w_VAR = ElementByXPath("//tr[13]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(kmd_w_VAR))
        {		
        Click(kmd_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - kmd");	
        }

        var burst_w_VAR = ElementByXPath("//tr[14]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(burst_w_VAR))
        {		
        Click(burst_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - burst");	
        }

        var btg_w_VAR = ElementByXPath("//tr[15]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(btg_w_VAR))
        {		
        Click(btg_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - btg");	
        }

        var lsk_w_VAR = ElementByXPath("//tr[16]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(lsk_w_VAR))
        {		
        Click(lsk_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - lsk");	
        }

        var dgb_w_VAR = ElementByXPath("//tr[17]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(dgb_w_VAR))
        {		
        Click(dgb_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - dgb");	
        }

        var qtum_w_VAR = ElementByXPath("//tr[18]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(qtum_w_VAR))
        {		
        Click(qtum_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - qtum");	
        }

        var waves_w_VAR = ElementByXPath("//tr[19]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(waves_w_VAR))
        {		
        Click(waves_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - waves");	
        }

        var bsv_w_VAR = ElementByXPath("//tr[20]/td[3]/button[@class='btn btn-primary btn-sm']");   	
        if (IsVisible(bsv_w_VAR))
        {		
        Click(bsv_w_VAR);
        Wait(2);
        WithdrawEndButton_Faunction(); //call
		Log("WithdrawEndButton - bsv");	
        }
		
     }// end AffWithdraw
     //=============//
	 

	//=========//
    //Nitro//
	//=========//
    if (GetBoolSetting("Nitro"))
    {
       GoToUrl("https://www.bitsler.com/en/vip-program/nitro");
       Wait();
       Wait(2);
       Claim_Function(); //call
	}
	//=========//


	//=========//
    //RakeBack//
	//=========//
    if (GetBoolSetting("RakeBack"))
    {
       GoToUrl("https://www.bitsler.com/en/vip-program/rakeback");
       Wait();
       Wait(2);
       Claim_Function(); //call
	}
	//=========//


    //===========//
    //Rain_AirDrop_Chat//
    //===========//

        if (GetBoolSetting("Rain_AirDrop_Chat"))
        {  

           GoToUrl("https://www.bitsler.com/");
		   Log("Rain_AirDrop_Chat: Go to bonus Chat");	
		   
           var ChatAlready_Open = ElementByXPath("//div[@class='ov-wrapper animated-width site-wrapper-chat']"); //ChatAlready_Open
           var ChatAlready_Close = ElementByXPath("//div[@class='ov-wrapper animated-width col-12']"); //ChatAlready_Close

           if (IsVisible(ChatAlready_Close))
           {
           var ChatButton = ElementByXPath("//div[@id='chat-switch']"); //ChatAlready_Close
           Click(ChatButton);
		   Log("Rain_AirDrop_Chat: click on ChatAlready_Close - to open the chat");
		   } 	
		   
           if (IsVisible(ChatAlready_Open))
           {
			Log("Rain_AirDrop_Chat: ChatAlready_Open");
		   }   
   
		   Wait(2);	
		   
           var ChatInput_VAR = ElementByXPath("//textarea[@placeholder='Type your message']"); //ChatInput_VAR
           SetText(ChatInput_VAR, GetSetting("MessageChat"));
		   
		   Wait(2);			   

           Driver.Navigate().Refresh(); //RefrashPage	

           Wait(2);				   

        }// end Rain_AirDrop_Chat
 
	
 		//================//
        //Menus Vars AllGames
		//================//
        //AllGames_Menu
        var AllGames_Menu_Var = GetSetting("AllGames_Menu");  	
		
		//===========================//
		//AllGames - none
		//===========================//
		
		 if(AllGames_Menu_Var=="none")
         {
			//we return after specific time  
			Log("none: we return after specific time ");
		 }
		//===========================//
		
		//===========================//
		//AllGames - Dice - Game
		//===========================//
		
        if(AllGames_Menu_Var=="Dice")
        {		

	      GoToUrl("https://www.bitsler.com/dice");		
		
          Wait();	
          Wait(3);		
		  
          //call the function - to CloseChat
		  ADFunction_CloseChat();
		
          Wait(3);	
			
          Coins_Function(); //call to select coin function
          Wait();	
			
          //call to "Function" Dice Game
		  ADFunction_Dice();
		
        }//end Dice Game
   
   //=======================//		

		//===========================//
		//AllGames - Roulette - Game
		//===========================//
		
		 if(AllGames_Menu_Var=="Roulette")
         {
			GoToUrl("https://www.bitsler.com/roulette");
		
            Wait();	
            Wait(3);
			
            Coins_Function(); //call to select coin function
            Wait();	
					 
			Log("Roulette: we return after specific time ");

		 }
		//===========================//			
		
		//===========================//
		//AllGames - Multicolor - Game
		//===========================//
		
   if(AllGames_Menu_Var=="Multicolor")
   {		

	        GoToUrl("https://www.bitsler.com/multicolor");		
		
            Wait();	
            Wait(3);
			
            //call the function - to CloseChat
		    ADFunction_CloseChat();
		
            Wait(3);	
			
            Coins_Function(); //call to select coin function
            Wait();	
	
		    ADFunction_Multicolor(); //call to "Function" Multicolor Game
		
   }//end Multicolor Game
   
   //=======================//	
		

		//===========================//
		//AllGames - CaraYcruz - Game
		//===========================//
		
		 if(AllGames_Menu_Var=="CaraYcruz")
         {
			GoToUrl("https://www.bitsler.com/cara-y-cruz");
		
            Wait();	
            Wait(3);
			
            Coins_Function(); //call to select coin function
            Wait();	
			
			Log("CaraYcruz: we return after specific time ");

		 }
		//===========================//


		//======//
		//ExclusiveBonusDrop_Telegram//
		//======//
        if (GetBoolSetting("ExclusiveBonusDrop_Telegram"))
        {
	      CheckForPopupsEnabled = false;    //disable

	      Title="bitsler";		
		  
          GoToUrl("https://t.me/s/bitsler_casino");
	      Log("Go to try - ExclusiveBonusDrop_Telegram");	
	      Wait();
	      Wait(5);	

            //Vertical - scrollHeight | scrollTop   //Horizontal - | scrollWidth | scrollLeft
            ExecuteScript("window.scrollTo(0, document.body.scrollTop)"); //if some elements not found in html - just before need to do `scrollTop` to find some elements
            Wait(3);
            ExecuteScript("window.scrollTo(0, document.body.scrollTop)"); //again
            Wait(3);
			
            var ExclusiveBonusDrop_Telegram_Last = ElementsByXPath("//div[contains(@class,'tgme_widget_message_text js-message_text') and contains(., 'COUPON') ]//a[position() = last() ]");
            var ElementsToCheck = ExclusiveBonusDrop_Telegram_Last.LastOrDefault();

            if (ElementsToCheck ==null) // Not Visible
            {
	           Log("ElementsToCheck - NOT found");
			}
			
            if (ElementsToCheck !=null) //Visible  
            {
			   Click(ElementsToCheck);
	           Log("ElementsToCheck - here");
			   
               Driver.SwitchTo().Window(Driver.WindowHandles[1]); 
			   
			   Wait(5);
			   
			   Coins_Function();
			   
			   Wait(5);
			   
               var Redeem_VAR = ElementByXPath("//span/span[contains(text(),'Redeem')]"); 
		       if (IsVisible(Redeem_VAR))
               {				
	             Log("ExclusiveBonusDrop_Telegram_Last - here");			
			     Click(Redeem_VAR);
			     Wait(7);			  
			   }
			   
               Driver.SwitchTo().Window(Driver.WindowHandles[0]); 
			   
               CheckForPopupsEnabled = true;     //enable
               CheckForPopups();    //call		
			   
	           Title="bitsler";		  
               GoToUrl("https://bitsler.com");	  
            }
	
        } //end ExclusiveBonusDrop_Telegram
		//======//
	
         //===========//
         //FreeBtc//
         //===========//
         if (GetBoolSetting("FreeBtc"))
         { 
            GoToUrl("https://www.bitsler.com/en/bitsler-coins/claim");		
            Wait(4);			
 	     	Log("FreeBtcVar: go to - bitsler-coins");     	
            Claim_Function(); //call	
 	     } 
		//============//

	     return Time_Function();
			
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
	
	

	
	
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
	
	
	

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	


        //=================//
       //Time_Function
        //=================//
        public int Time_Function()
        {

           //site time with date - example 10:00 PM | 10:00 AM  OR UTC LocalTime
           var CheckAvailableGeneral = ElementByXPath("//div[contains(@id,'result') and contains(text(),'wait') or contains(text(),'UTC') ]");
           if (IsVisible(CheckAvailableGeneral))
           {
	         Log("ParseExact - here");             
	         var XpathTimeVAR = ElementByXPath("//div[contains(@class,'fqakeD')]/span[1]/span");
	         var TimeVAR = DateTime.ParseExact(XpathTimeVAR.Text.Trim(),"t", new CultureInfo("en-US") ); //AM-PM -- t = Short time pattern - for all info here: predefined formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings  | custom formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings			  			   
	         //var TimeVAR = DateTime.ParseExact(XpathTimeVAR.Text.Trim(),"yyyy-MM-dd HH:mm:ss", new CultureInfo("en-US") ).ToLocalTime(); //UTC -- yyyy-MM-dd HH:mm:ss =  LocalTime - for all info here: predefined formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings  | custom formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings			  
	         //return (int)((TimeVAR - DateTime.Now).TotalSeconds);
	 
             var TimeNode = (int)((TimeVAR - DateTime.Now).TotalSeconds);
             return TimeNode>0 ? TimeNode : GetWaitSetting();  //in case the "ParseExact" fails it will go to "GetWaitSetting"
		  
           } //end CheckAvailableGeneral
		   		   
		   //site time with normal counter
		   var HourVar = ElementByXPath("//span[@class='hours']");			
           var MinVar = ElementByXPath("//span[@class='minutes']");
		   var SecVar = ElementByXPath("//span[@class='seconds']");

           if (IsVisible(MinVar))
           {
	         Log("Time_Function - WaitTimerText apper - return to site time"); 
             int hour,min,sec;
             hour = Convert.ToInt32(HourVar.Text.Trim() )*3600;
             min = Convert.ToInt32(MinVar.Text.Trim() )*60;
             sec = Convert.ToInt32(SecVar.Text.Trim() );
             return hour+min+sec;
           } 

           if (!IsVisible(MinVar))
           {
	            Log("Time_Function - return to your time"); 
		        return GetWaitSetting();
           }

	       Log("Time_Function - return to your time - backup general"); 
		   return GetWaitSetting(); //backup general

           return 0;		
        }//end Time_Function
        //=================//	

	
//====================//	
//ADFunction_CloseChat
//====================//	
 public int ADFunction_CloseChat()
 {
	 
    var ChatOpen = ElementByXPath("//div[contains(@class,'site-wrapper-chat')]"); 
    var ChatClose = ElementByXPath("//div[contains(@class,'w-100')]"); 
    var ButtonCloseChat = ElementByXPath("//div[contains(@id,'chat-switch')]"); 
	
	if (IsVisible(ChatOpen))
    {      
      Log("CloseChat: the Chat was open, so now we close the Chat");
      Click(ButtonCloseChat);
    }

	if (IsVisible(ChatClose))
    {      
      Log("CloseChat: the Chat close ");
    }
		
 return 0;
 }//end ADFunction_CloseChat
//====================//

 
 
//====================//	
//Coins_Function
//====================//	
 public int Coins_Function()
 {
	
      var OpenTabCoins = ElementByXPath("//button[@class='btn dropdown-toggle cs-button btn-secondary']"); 
      Log("click - OpenTabCoins");
      Click(OpenTabCoins);
 
	  
      var MenuCoinsVAR = GetSetting("MenuCoins"); 
	  
      if(MenuCoinsVAR=="btc")
      {
      var btc_coin_VAR = ElementByXPath("//li[1]//div[contains(@class,'clearfix')]"); 
      Log("click - btc_coin_VAR");
      Click(btc_coin_VAR);
	  }// end btc
	  
      if(MenuCoinsVAR=="eth")
      {
      var eth_coin_VAR = ElementByXPath("//li[2]//div[contains(@class,'clearfix')]"); 
      Log("click - eth_coin_VAR");
      Click(eth_coin_VAR);
	  }// end eth
	  
      if(MenuCoinsVAR=="xrp")
      {
      var xrp_coin_VAR = ElementByXPath("//li[3]//div[contains(@class,'clearfix')]"); 
      Log("click - xrp_coin_VAR");
      Click(xrp_coin_VAR);
	  }// end xrp	
	  
      if(MenuCoinsVAR=="ltc")
      {
      var ltc_coin_VAR = ElementByXPath("//li[4]//div[contains(@class,'clearfix')]"); 
      Log("click - ltc_coin_VAR");
      Click(ltc_coin_VAR);
	  }// end ltc  
	  
	  if(MenuCoinsVAR=="usdt")
      {
      var usdt_coin_VAR = ElementByXPath("//li[5]//div[contains(@class,'clearfix')]"); 
      Log("click - usdt_coin_VAR");
      Click(usdt_coin_VAR);
	  }// end usdt  
	  
	  if(MenuCoinsVAR=="doge")
      {
      var doge_coin_VAR = ElementByXPath("//li[6]//div[contains(@class,'clearfix')]"); 
      Log("click - doge_coin_VAR");
      Click(doge_coin_VAR);
	  }// end doge 

	  if(MenuCoinsVAR=="etc")
      {
      var etc_coin_VAR = ElementByXPath("//li[7]//div[contains(@class,'clearfix')]"); 
      Log("click - etc_coin_VAR");
      Click(etc_coin_VAR);
	  }// end etc  

	  if(MenuCoinsVAR=="bch")
      {
      var bch_coin_VAR = ElementByXPath("//li[8]//div[contains(@class,'clearfix')]"); 
      Log("click - bch_coin_VAR");
      Click(bch_coin_VAR);
	  }// end bch   
	  
	  if(MenuCoinsVAR=="zec")
      {
      var zec_coin_VAR = ElementByXPath("//li[9]//div[contains(@class,'clearfix')]"); 
      Log("click - zec_coin_VAR");
      Click(zec_coin_VAR);
	  }// end zec  

	  if(MenuCoinsVAR=="dgb")
      {
      var dgb_coin_VAR = ElementByXPath("//li[10]//div[contains(@class,'clearfix')]"); 
      Log("click - dgb_coin_VAR");
      Click(dgb_coin_VAR);
	  }// end dgb  
	  
	  if(MenuCoinsVAR=="eos")
      {
      var eos_coin_VAR = ElementByXPath("//li[11]//div[contains(@class,'clearfix')]"); 
      Log("click - eos_coin_VAR");
      Click(eos_coin_VAR);
	  }// end seos 	  
	  
	  if(MenuCoinsVAR=="xlm")
      {
      var xlm_coin_VAR = ElementByXPath("//li[12]//div[contains(@class,'clearfix')]"); 
      Log("click - xlm_coin_VAR");
      Click(xlm_coin_VAR);
	  }// end xlm  	  
	  
	  if(MenuCoinsVAR=="trx")
      {
      var trx_coin_VAR = ElementByXPath("//li[13]//div[contains(@class,'clearfix')]"); 
      Log("click - trx_coin_VAR");
      Click(trx_coin_VAR);
	  }// end trx  

	  if(MenuCoinsVAR=="dash")
      {
      var dash_coin_VAR = ElementByXPath("//li[14]//div[contains(@class,'clearfix')]"); 
      Log("click - dash_coin_VAR");
      Click(dash_coin_VAR);
	  }// end dash 

	  if(MenuCoinsVAR=="bsv")
      {
      var bsv_coin_VAR = ElementByXPath("//li[15]//div[contains(@class,'clearfix')]"); 
      Log("click - bsv_coin_VAR");
      Click(bsv_coin_VAR);
	  }// end bsv  
	  
	  if(MenuCoinsVAR=="btg")
      {
      var btg_coin_VAR = ElementByXPath("//li[16]//div[contains(@class,'clearfix')]"); 
      Log("click - btg_coin_VAR");
      Click(btg_coin_VAR);
	  }// end btg  	  
	  
	  if(MenuCoinsVAR=="neo")
      {
      var neo_coin_VAR = ElementByXPath("//li[17]//div[contains(@class,'clearfix')]"); 
      Log("click - neo_coin_VAR");
      Click(neo_coin_VAR);
	  }// end neo  
	  
	  if(MenuCoinsVAR=="strat")
      {
      var strat_coin_VAR = ElementByXPath("//li[18]//div[contains(@class,'clearfix')]"); 
      Log("click - strat_coin_VAR");
      Click(strat_coin_VAR);
	  }// end strat	  

	  if(MenuCoinsVAR=="kmd")
      {
      var kmd_coin_VAR = ElementByXPath("//li[19]//div[contains(@class,'clearfix')]"); 
      Log("click - kmd_coin_VAR");
      Click(kmd_coin_VAR);
	  }// end kmd  

	  if(MenuCoinsVAR=="lsk")
      {
      var lsk_coin_VAR = ElementByXPath("//li[20]//div[contains(@class,'clearfix')]"); 
      Log("click - lsk_coin_VAR");
      Click(lsk_coin_VAR);
	  }// end lsk
	  
	  if(MenuCoinsVAR=="qtum")
      {
      var qtum_coin_VAR = ElementByXPath("//li[21]//div[contains(@class,'clearfix')]"); 
      Log("click - qtum_coin_VAR");
      Click(qtum_coin_VAR);
	  }// end qtum  

	  if(MenuCoinsVAR=="waves")
      {
      var waves_coin_VAR = ElementByXPath("//li[22]//div[contains(@class,'clearfix')]"); 
      Log("click - waves_coin_VAR");
      Click(waves_coin_VAR);
	  }// end waves  

	  if(MenuCoinsVAR=="btslr")
      {
      var btslr_coin_VAR = ElementByXPath("//li[23]//div[contains(@class,'clearfix')]"); 
      Log("click - btslr_coin_VAR");
      Click(btslr_coin_VAR);
	  }// end btslr  
	
 return 0;
 }//end Coins_Function
//====================//


	
 //=================//
 //Games_Save_Settings_For_AutoBet_Function
 //=================//
 public int Games_Save_Settings_For_AutoBet_Function()
 {
	 
  var Message_Save_Settings = ElementByXPath("//p[contains(text(),'you like to save your')]"); 
  if (IsVisible(Message_Save_Settings))
  {
    Log("AutoBet - popup - save settings ");
    var No_Button = ElementByXPath("//button[@type='button' and contains(text(),'No') or contains(text(),'no') ]");
    if (IsVisible(No_Button))
    {
      Log("AutoBet - click - NO - Button  ");
      Click(No_Button);
    }
				 
  }

 return 0;
 }//end Games_Save_Settings_For_AutoBet_Function
//=================//	
	
	
	
//====================//	
//ADFunction_Multicolor
//====================//
 public int ADFunction_Multicolor()
 {
	 		
    Wait(2);
	
	if (GetBoolSetting("Star"))
    {
    var StarAmountVar = ElementByXPath("//input[@id='ctrl-bet0']");
    SetText(StarAmountVar, GetSetting("StarAmount"));
	}
	
    Wait(2);
	
	if (GetBoolSetting("Red"))
    {
    var RedAmountVar = ElementByXPath("//input[@id='ctrl-bet1']");
    SetText(RedAmountVar, GetSetting("RedAmount"));
    }
	
    Wait(2);
	
	if (GetBoolSetting("Blue"))
    {
    var BlueAmountVar = ElementByXPath("//input[@id='ctrl-bet2']");
    SetText(BlueAmountVar, GetSetting("BlueAmount"));
    }
	
    Wait(2);
	
	if (GetBoolSetting("Yellow"))
    {
    var YellowAmountVar = ElementByXPath("//input[@id='ctrl-bet3']");
    SetText(YellowAmountVar, GetSetting("YellowAmount"));
    }
	
    Wait(2);

	if (GetBoolSetting("Green"))
    {
    var GreenAmountVar = ElementByXPath("//input[@id='ctrl-bet4']");
    SetText(GreenAmountVar, GetSetting("GreenAmount"));
    }

    Wait(3);
	
	
    //====//
	//spin
	//====//
    var SpinGeneralButton = ElementByXPath("//div[@class='game-bottom row']/div[1]");
    var SpinButtonAuto = ElementByXPath("//button[@class='btn btn-primary btn-play col-12 btn-mc btn-auto']");
    var CounterInput = ElementByXPath("//input[@class='form-control text-center']");

	      Wait(2);

          Click(SpinGeneralButton);		
	
	      Wait(2);
		  
          Click(SpinButtonAuto);

	      Wait(2);

          Games_Save_Settings_For_AutoBet_Function(); //call

          Wait(2);
		  
          SetText(CounterInput, GetSetting("MulticolorGame_Counter"));

	      Wait(3);
		  
          var AlertMessage_MinimumBet = ElementByXPath("//div[@class='alert global-alert alert-dismissible alert-danger']");  
	      if (IsVisible(AlertMessage_MinimumBet))
	      {		  
	      Log("Spin: AlertMessage_MinimumBet - we return after 60 min");
          ad = true; //we return after 55 min
		  }
	
	
      while (true && !ad)
      {
		  
          while (IsVisible(ElementByXPath("//input[@class='form-control text-center' and @disabled='disabled']")))
          {
			 //so Wait until the button visible
             Wait();

            var Counterbreak = ElementByXPath("//input[@class='form-control text-center']");
	        if (IsVisible(Counterbreak))
	        {
               break; 						

            }	
		  
          }//end while IsVisible

      }//end while
	  
 
 return 0;
 }//end ADFunction_Multicolor
	

	
	
	
//================//	
//ADFunction_Dice
//================//
 public int ADFunction_Dice()
 {
	 
	
//=======//
//Dice Game
//=======//

//call to close
ADFunction_CloseChat();

Wait(2);

//Dice_My_Bets - click on my bets
var Dice_My_Bets = ElementByXPath("//li[contains(text(),'My Bets')]");
Click(Dice_My_Bets);
Log("Dice - click on my bets");

Wait(2);

//Dice_Tab_AutoGame- click on Tab AutoGame
var Dice_Tab_AutoGame = ElementByXPath("//span[contains(text(),'Auto') or contains(text(),'auto') ]");
Click(Dice_Tab_AutoGame);
Log("Dice - click on Tab AutoGame");
Wait(2);

Games_Save_Settings_For_AutoBet_Function(); //call

Wait(2);

//Dice_AmountInput
var Dice_Amount_Input_Var = ElementByXPath("//input[contains(@id,'ctrl-bet')]");
Click(Dice_Amount_Input_Var);
Wait(2);
SendKeys_Control_AND_A_AND_Delete_Function(); //call
Wait(2);
SetText(Dice_Amount_Input_Var, GetSetting("Dice_Amount_Input"));
Log("Dice - set Amount to play");

//Dice_X2_Button
var Dice_X2_Button = ElementByXPath("//li[@class='col btn btn-primary' and contains(text(),'X2')]");
//Dice_/2_Button
var Dice_Division_2_Button = ElementByXPath("//li[@class='col btn btn-primary' and contains(text(),'/2')]");

//Dice_PayOut 
var Dice_PayOut_Input_Var = ElementByXPath("//input[@id='ctrl-payout']");
Click(Dice_PayOut_Input_Var);
Wait(2);
SendKeys_Control_AND_A_AND_Delete_Function(); //call
Wait(2);
SetText(Dice_PayOut_Input_Var, GetSetting("Dice_PayOut_Input"));
Log("Dice - set PayOut");

//Dice_Chance
/*
var Dice_Chance_Input_Var = ElementByXPath("//input[@id='ctrl-chance']");
Click(Dice_Chance_Input_Var);
Wait(2);
SendKeys_Control_AND_A_AND_Delete_Function(); //call
Wait(2);
SetText(Dice_Chance_Input_Var, GetSetting("Dice_Chance_Input"));
Log("Dice - set Chance");
*/

//Dice_NumberOfRoll
var Dice_NumberOfRoll_Var = ElementByXPath("//input[@class='form-control text-center']");
Click(Dice_NumberOfRoll_Var);
Wait(2);
SendKeys_Control_AND_A_AND_Delete_Function(); //call
Wait(2);
SetText(Dice_NumberOfRoll_Var, GetSetting("Dice_NumberOfRoll"));
Log("Dice - set NumberOfRoll");
//===============//


//Dice_Roll_UnderOver_Menu
var Dice_Roll_UnderOver_Menu_Var = GetSetting("Dice_Roll_UnderOver_Menu");  	
var Dice_Roll_Under = ElementByXPath("//div[contains(@class,'input-group ctrl-toggle')]//span[contains(text(),'under')]");
var Dice_Roll_Over = ElementByXPath("//div[contains(@class,'input-group ctrl-toggle')]//span[contains(text(),'over')]");

   if(Dice_Roll_UnderOver_Menu_Var=="none")
   {
	//none
	Log("Dice_Roll_UnderOver_Menu - none");
   }

   if(Dice_Roll_UnderOver_Menu_Var=="Under")
   {
	if (IsVisible(Dice_Roll_Over))
	{	
	  Click(Dice_Roll_Under);
	  Log("Dice_Roll_UnderOver_Menu - Under");	  
	} 
   }
     
   if(Dice_Roll_UnderOver_Menu_Var=="Over")
   {
	if (IsVisible(Dice_Roll_Under))
	{	
	  Click(Dice_Roll_Over);
	  Log("Dice_Roll_UnderOver_Menu - Over");	  
	} 
   }
//===========//


Wait(2);

 
 /*
 
 //Dice_Speed_Level
var Dice_Speed_Level_Var = GetSetting("Dice_Speed_Level_Menu");  	

var Dice_Speed_1_Level = ElementByXPath("//div[@id='speed-bet-slider']/div[@class='noUi-base']/div[@class='noUi-origin noUi-background' and @style='left: 0%;'] ");
var Dice_Speed_2_Level = ElementByXPath("//div[@id='speed-bet-slider']/div[@class='noUi-base']/div[@class='noUi-origin noUi-background' and @style='left: 33.3333%;'] ");
var Dice_Speed_3_Level = ElementByXPath("//div[@id='speed-bet-slider']/div[@class='noUi-base']/div[@class='noUi-origin noUi-background noUi-stacking' and @style='left: 66.6667%;'] ");
var Dice_Speed_4_Level = ElementByXPath("//div[@id='speed-bet-slider']/div[@class='noUi-base']/div[@class='noUi-origin noUi-background noUi-stacking' and @style='left: 100%;']");


   if(Dice_Speed_Level_Var=="none")
   {
	//none
	Log("Dice_Speed_Level - none");
   }


   if(Dice_Speed_Level_Var=="Level_1")
   {
	//Level_1
	Log("Dice_Speed_Level - Level_1");
	Click(Dice_Speed_1_Level);
   }
   
   
   if(Dice_Speed_Level_Var=="Level_2")
   {
	//Level_2
	Log("Dice_Speed_Level - Level_2");
	Click(Dice_Speed_2_Level);
   }
   
   
   if(Dice_Speed_Level_Var=="Level_3")
   {
	//Level_3
	Log("Dice_Speed_Level - Level_3");
	Click(Dice_Speed_3_Level);
   }

   
   if(Dice_Speed_Level_Var=="Level_4")
   {
	//Level_4
	Log("Dice_Speed_Level - Level_4");
	Click(Dice_Speed_4_Level);
   }
//===========//


*/

Wait(2);

//Dice_Winning_Menu
var Dice_Winning_Menu_Var = GetSetting("Dice_Winning_Menu");  	
var Dice_Winning_Return_to_base = ElementByXPath("//div[@class='row auto-increase']/div[1]//button[contains(text(),'Reset to base')]");

var Dice_Winning_Increase_by = ElementByXPath("//div[@class='row auto-increase']/div[1]//button[contains(text(),'Increase by')]");
var Dice_Winning_Increase_by_Menu = ElementByXPath("//div[@class='row auto-increase']/div[1]//li[2]");
var Dice_Winning_Increase_by_X_Button = ElementByXPath("//div[@class='row auto-increase']/div[1]//li[2]/a");

   if(Dice_Winning_Menu_Var=="Return to base")
   {
	//Return to base
	Log("Dice_Winning_Menu - Return to base");
	Click(Dice_Winning_Return_to_base);
   }
     
   if(Dice_Winning_Menu_Var=="Increase by")
   {
	//Increase by
	Click(Dice_Winning_Increase_by);
	Log("Dice_Winning_Menu - Increase by");

    Wait(2);
	
	Click(Dice_Winning_Increase_by_Menu);
	Log("Dice_Winning_Menu - Increase by - Menu");

    Wait(2);	
	
	Click(Dice_Winning_Increase_by_X_Button);
	Log("Dice_Winning_Menu - Increase by - X_Button");

    Wait(2);	
	
    var Dice_Winning_Increase_Input_Var = ElementByXPath("//div[@class='row auto-increase']/div[1]//div[@class='input-group increase_by']//input");
	Click(Dice_Winning_Increase_Input_Var);
    Wait(2);
    SendKeys_Control_AND_A_AND_Delete_Function(); //call
    Wait(2);	
    SetText(Dice_Winning_Increase_Input_Var, GetSetting("Dice_Winning_Increase_Input"));
    Log("Dice - set Winning_Increase");
   }
//===========//

Wait(2);

//Dice_Losing_Menu
var Dice_Losing_Menu_Var = GetSetting("Dice_Losing_Menu");  	
var Dice_Losing_Return_to_base = ElementByXPath("//div[@class='row auto-increase']/div[2]//button[contains(text(),'Reset to base')]");

var Dice_Losing_Increase_by = ElementByXPath("//div[@class='row auto-increase']/div[2]//button[contains(text(),'Increase by')]");
var Dice_Losing_Increase_by_Menu = ElementByXPath("//div[@class='row auto-increase']/div[2]//li[2]");
var Dice_Losing_Increase_by_X_Button = ElementByXPath("//div[@class='row auto-increase']/div[2]//li[2]/a");

   if(Dice_Losing_Menu_Var=="Return to base")
   {
	//Return to base
	Log("Dice_Losing_Menu - Return to base");
	Click(Dice_Losing_Return_to_base);
   }
    
   if(Dice_Losing_Menu_Var=="Increase by")
   {
	//Increase by
	Log("Dice_Losing_Menu - Increase by");
	Click(Dice_Losing_Increase_by);

    Wait(2);

	Log("Dice_Losing_Menu - Increase by - Menu");
	Click(Dice_Losing_Increase_by_Menu);

    Wait(2);

	Log("Dice_Losing_Menu - Increase by - X_Button");
	Click(Dice_Losing_Increase_by_X_Button);

    Wait(2);
	
    var Dice_Losing_Increase_Input_Var = ElementByXPath("//div[@class='row auto-increase']/div[2]//div[@class='input-group increase_by']//input");
	Click(Dice_Losing_Increase_Input_Var);
    Wait(2);
    SendKeys_Control_AND_A_AND_Delete_Function(); //call
    Wait(2);	
    SetText(Dice_Losing_Increase_Input_Var, GetSetting("Dice_Losing_Increase_Input"));
    Log("Dice - set Losing_Increase");
   }
//===========//

Wait(2);

var Dice_Spin_Button = ElementByXPath("//div[contains(@class,'col-10')]//button");
Click(Dice_Spin_Button);
Log("Dice - click on Spin_Button");

var AlertMessage_MinimumBet = ElementByXPath("//div[contains(text(),'Amount is less than minimum')]"); 
if (IsVisible(AlertMessage_MinimumBet))
{		  
Log("Spin: AlertMessage_MinimumBet - we return after 60 min");
}	
  
Wait(1);

      var TimeToWaitForBreak = DateTime.Now.AddSeconds(GetIntSetting("Dice_break")); //900sec = 15min 
      while (true)
      {
		  
        Wait();	//so Wait until the button visible
		Log("Working..");
		
        //Balance_info 
        var Balance_info = ElementByXPath("//span[contains(@class,'bal-amount')]"); 
	    if (Balance_info !=null) //Visible
	    {		
         Log("Your Balance now is: " + Balance_info.Text);
		}	 
		  
        var Counterbreak = ElementByXPath("//button[contains(text(),'Start autobet')]");
	    if (Counterbreak !=null) //Visible
	    {
        Log("break");				
        break; 				
        }	

        if (DateTime.Now > TimeToWaitForBreak) //if the time above sec 
        {
        Log("Dice_Game - break - TimeToWaitForBreak");
        break; //break the wait loop
        }

      }//end while
	   
 return 0;
 } //end ADFunction_Dice
//=============// 	
	
	
       //=============//
       //WithdrawEndButton_Faunction
       //=============// 
        public int WithdrawEndButton_Faunction()
        {			
        var WithdrawEndButton = ElementByXPath ("//button[@class='btn btn-primary' and contains(text(),'Withdraw')]");  
        Click(WithdrawEndButton);		
		return 0;
		}// end WithdrawEndButton_Faunction
		//=============// 	
	

      //=================//
      //Claim_Function
      //=================//
      public int Claim_Function()
      {

	     ADFunction_CloseChat(); //call the function - to CloseChat
         Wait(5);
	     
	     var ClaimCheck = ElementByXPath("//button[contains(@type,'button') and @disabled ]");   
	     if (IsVisible(ClaimCheck))
	     { 
	       Log("ClaimButton - not here - try next time"); 
	     }
	     if (!IsVisible(ClaimCheck))
	     {
           Recaptcha_Function(); //call
		   Wait(3);
           var ClaimButton = ElementByXPath("//button[contains(@type,'button') and contains(text(),'Claim') or contains(text(),'claim') ]");
           Click(ClaimButton); 
	       Log("ClaimButton - success"); 
           ClaimSuccess(); //Marks the claim as a success
		   Wait(2);
 	       var AlertGeneral = ElementByXPath("//div[@role='alert']"); 
		   if (AlertGeneral !=null) //visible
           {
           Log(AlertGeneral.Text);
	       }
	     }
		 
      return 0;
      }//end Claim_Function
      //=================//	


        //=================//
        //SendKeys_Control_AND_A_AND_Delete_Function
        //=================//

        public int SendKeys_Control_AND_A_AND_Delete_Function()
        {
			
            //Control + a
            Log("Control + a");
            Actions Builder_30_Act = new Actions(Driver);
            Wait(3);
            Builder_30_Act.KeyDown(Keys.Control).Build().Perform(); //go to END of content
            Builder_30_Act.SendKeys("a").Build().Perform(); //a key
            Builder_30_Act.KeyUp(Keys.Control).Build().Perform(); //go to START of content
            
            //Delete
            Log("Delete");
            Actions Builder_31_Act = new Actions(Driver);
            Wait(3);
            Builder_31_Act.SendKeys(Keys.Delete).Build().Perform();
			
		return 0;
        }//end SendKeys_Control_AND_A_AND_Delete_Function
        //=================//	
		

        //=================//
       //invisible_Recaptcha_Function
        //=================//
        public int invisible_Recaptcha_Function()
        {
			
          var RecaptchaOpen_Iframe = ElementByXPath ("//div[contains(@style,'opacity: 1')]//iframe[contains(@src,'recaptcha')]");  
          if (RecaptchaOpen_Iframe !=null)          
		  {
            //SolveCaptcha if apper
            Log("DO invisible_Recaptcha");	  
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Recaptcha - Fail solving captcha");
            }
		    RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		    
            Wait();
		    
            //ExecuteScript("afterResolveCaptcha");
		  }
		
		return 0;
        }//end invisible_Recaptcha_Function
        //=================//	



        //=================//
       //Recaptcha_Function
        //=================//

        public int Recaptcha_Function()
        {
			
          //DoSolveImageCaptcha
          var SolveMedia = ElementByXPath ("//img[contains(@id,'adcopy-puzzle-image-image')]"); 
          if (IsVisible(SolveMedia))
		  {  
            Log("DO SolveMedia");	  
	        var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"),ElementByXPath("//input[@name='adcopy_response']")); 
            if (result_2 > 0)
            {
                return Fail("SolveMedia - Fail solving captcha");
            }
		  }
		  
	     //for recaptcha popup after click on button - ("//div[contains(@style,'opacity: 1')]//iframe[contains(@src,'recaptcha')]") 
          var Recaptcha_Login_Iframe = ElementByXPath ("//div[@class='recaptcha mt-2']"); 	 
          var Recaptcha_Faucet_Iframe = ElementByXPath ("//div[@class='col-12']//iframe[contains(@style,'display: none') ]"); 
          if (!IsVisible(Recaptcha_Faucet_Iframe) || IsVisible(Recaptcha_Login_Iframe) )
		  {		  
            var Recaptcha_ON = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 	  
            if (IsVisible(Recaptcha_ON))
		    {     
              //SolveCaptcha if apper
              Log("DO Recaptcha");	  
              var result = base.DoSolveCaptcha();
              if (result > 0)
              {
                  return Fail("Recaptcha - Fail solving captcha");
              }
              RecaptchaUtility utility = new RecaptchaUtility(this);
              utility.DoSolve();
			}
		  }

		return 0;
        }//end Recaptcha_Function
        //=================//	
		

	
} //public class bitsler
