
//==================//
//script Written by: ••AviramDayan•• 14/04/2021 19:00PM - Version 1
//Last Update: 02/05/2021 22:15PM - Version 5
//==================//

using FaucetCollector.Script;
using System;
using System.Globalization;

//css_ref FaucetCollector.Utilities
//css_ref FaucetCollector.Captcha


public class FaucetSpinCom : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://FaucetSpin.com")
            {
                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},

                new FaucetSetting(){Name="btc",Display="btc",Type=EditorType.CheckBox,Default=true},		
                new FaucetSetting(){Name="bch",Display="bch",Type=EditorType.CheckBox,Default=true},		
                new FaucetSetting(){Name="ltc",Display="ltc",Type=EditorType.CheckBox,Default=true},		
                new FaucetSetting(){Name="eth",Display="eth",Type=EditorType.CheckBox,Default=true},		

                //new FaucetSetting() { Name = "CaptchaChoose", Display = "ON SolveMedia / OFF ReCaptcha", Type = EditorType.CheckBox, Default = true },			
                
			
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }


    //My DomainName
    //string DomainName_String = "https://FaucetSpin.com";
    //example - GoToUrl(DomainName_String);
    //==========//


    //============================================================//
    //the number of "successes" in the script - when are finished  
    //============================================================//
    public override void Start()
    {
        ad = false;

        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "FaucetSpin";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //*[text()='']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
    //============================================================//
    //the number of "successes" in the script - when are finished  
    //============================================================//



    bool ad;


    public override int DoInit()
    {


        //Let Faucet Collector continue.
        return base.DoInit();
    }




    //==================//
    //save Login Cookies 
    //==================//
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[contains(@href,'logout')]") != null;
        //return true;
    }
    //==================//
    //save Login Cookies 
    //==================//





    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }




    //========//
    //DoLogin
    //========//
    public override int DoLogin()
    {

        var ExitButton = ElementByXPath("//a[contains(@href,'logout')]");

        //if i NOT Login - go to Login Page
        if (!IsVisible(ExitButton))
        {

            GoToUrl("http://www.faucetspin.com/login.php");
            Wait();
            Wait(2);

            var Email_VAR = ElementByXPath("//input[@id='email']");
            if (IsVisible(Email_VAR))
            {
                SetText(Email_VAR, GetSetting("Email"));
            }

            Wait(2);

            var Password_VAR = ElementByXPath("//input[@id='password']");
            if (IsVisible(Password_VAR))
            {
                SetText(Password_VAR, GetPassword("Password"));
            }

            Wait(4);

            Recaptcha_Function(); //call

            Wait(2);

            var ButtonLog = ElementByXPath("//button[@type='submit']");
            if (IsVisible(ButtonLog))
            {
                Click(ButtonLog);
            }

            Wait();

        } // end ExitButton


        return base.DoLogin();
    }
    //========//
    //DoLogin
    //========//






    //==========//
    //AfterLogin
    //=========//
    public override int AfterLogin()
    {


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
    //==========//
    //AfterLogin
    //=========//





    //=============//
    //GetFaucetWaitTime
    //=============//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
            ad = false; //solve the problem in start - after he return to script again
            return GetWaitSetting();
        }   //end ad

        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
    //=============//
    //GetFaucetWaitTime
    //=============//





    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }



    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }





    //=============//
    //DoSolveFaucet
    //=============//
    public override int DoSolveFaucet()
    {

        //btc
        if (GetBoolSetting("btc"))
        {

            GoToUrl("http://www.faucetspin.com/index.php?faucet=" + GetSetting("btc") );
            Wait();
            Wait(4);
            Action_Function(); //call

        } //end btc

        //btc
        if (GetBoolSetting("bch"))
        {

            GoToUrl("http://www.faucetspin.com/index.php?faucet=" + GetSetting("bch") );
            Wait();
            Wait(4);
            Action_Function(); //call

        } //end bch

        //ltc
        if (GetBoolSetting("bch"))
        {

            GoToUrl("http://www.faucetspin.com/index.php?faucet=" + GetSetting("ltc") );
            Wait();
            Wait(4);
            Action_Function(); //call

        } //end ltc

        //eth
        if (GetBoolSetting("bch"))
        {

            GoToUrl("http://www.faucetspin.com/index.php?faucet=" + GetSetting("eth") );
            Wait();
            Wait(4);
            Action_Function(); //call

        } //end eth
		
        return Time_Function(); //call to function time

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }




    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }




    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }


    //=================//
    //Action_Function
    //=================//
    public int Action_Function()
    {

            var WaitTimerText = ElementByXPath("//span[@id='countdown']");
            if (IsVisible(WaitTimerText))
            {
                return Time_Function(); //call to function time

            } // end WaitTimerText

            Recaptcha_Function(); //call if apper

            Wait(2);

            var Button_Next = ElementByXPath("//button[contains(text(),'Next')]");
            if (IsVisible(Button_Next))
            {
                Log("FaucetClaim - Button_Next");
                Click(Button_Next);
            }

            Recaptcha_Function(); //call if apper

            Wait(2);

            var Button_Claim = ElementByXPath("//button[contains(text(),'Claim')]");
            if (IsVisible(Button_Claim))
            {
                Log("FaucetClaim - Button_Claim");
                Click(Button_Claim);
            }

            Wait(6);

            var Success_Claim = ElementByXPath("//div[@class='alert alert-success']"); //("//div[@class='alert alert-success']")
            if (IsVisible(Success_Claim))
            {
                Log("FaucetClaim - Success - " + Success_Claim.Text);
                ClaimSuccess(); //Marks the claim as a success
            }

            Wait(4);

            //Driver.Navigate().Refresh(); //Refresh
            GoToUrl("https://www.faucetspin.com/index.php");
        return 0;
    }//end Action_Function
     //=================//




    //=================//
    //Time_Function
    //=================//
    public int Time_Function()
    {

        //site time with date - example 10:00 PM | 10:00 AM  OR UTC LocalTime
        var CheckAvailableGeneral = ElementByXPath("//div[contains(@id,'result') and contains(text(),'wait') or contains(text(),'UTC') ]");
        if (IsVisible(CheckAvailableGeneral))
        {
            Log("ParseExact - here - check ");

            var XpathTimeVAR = ElementByXPath("//div[contains(@class,'fqakeD')]/span[1]/span");
            if (IsVisible(XpathTimeVAR))
            {
                Log("XpathTimeVAR - Element - LocalTime - Visible - return to site time");

                var TimeVAR = DateTime.ParseExact(XpathTimeVAR.Text.Trim(), "t", new CultureInfo("en-US")); //AM-PM -- t = Short time pattern - for all info here: predefined formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings  | custom formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings			  			   
                                                                                                            //var TimeVAR = DateTime.ParseExact(XpathTimeVAR.Text.Trim(),"yyyy-MM-dd HH:mm:ss", new CultureInfo("en-US") ).ToLocalTime(); //UTC -- yyyy-MM-dd HH:mm:ss =  LocalTime - for all info here: predefined formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings  | custom formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings			  
                                                                                                            //return (int)((TimeVAR - DateTime.Now).TotalSeconds);

                var TimeNode = (int)((TimeVAR - DateTime.Now).TotalSeconds);
                return TimeNode > 0 ? TimeNode : GetWaitSetting();  //in case the "ParseExact" fails it will go to "GetWaitSetting"
            }

            if (!IsVisible(XpathTimeVAR))
            {
                Log("XpathTimeVAR - Element - LocalTime - NOT Visible");
            }

        } //end CheckAvailableGeneral


        //site time with normal counter
        var MinVar = ElementByXPath("//span[@id='countdown']");

        if (IsVisible(MinVar))
        {
            Log("Time_Function - WaitTimerText apper - return to site time");
            int min, sec;
            min = Convert.ToInt32(MinVar.Text.Trim().Replace("0h", "").Replace("m", "").Replace("s", "").Split(' ')[1]) * 60;
            sec = Convert.ToInt32(MinVar.Text.Trim().Replace("0h", "").Replace("m", "").Replace("s", "").Split(' ')[2]);
            return min + sec;
        }

        if (!IsVisible(MinVar))
        {
            Log("Time_Function - return to your time");
            return GetWaitSetting();
        }

        Log("Time_Function - return to your time - backup general");
        return GetWaitSetting(); //backup general

        return 0;
    }//end Time_Function
     //=================//


    //=================//
    //invisible_Recaptcha_Function
    //=================//
    public int invisible_Recaptcha_Function()
    {

        var RecaptchaOpen_Iframe = ElementByXPath("//div[contains(@style,'opacity: 1')]//iframe[contains(@src,'recaptcha')]");
        if (RecaptchaOpen_Iframe != null)
        {
            //SolveCaptcha if apper
            Log("DO invisible_Recaptcha");
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Recaptcha - Fail solving captcha");
            }
            FaucetCollector.Captcha.RecaptchaUtility utility = new FaucetCollector.Captcha.RecaptchaUtility(this);
            utility.DoSolve();

            Wait();

            //ExecuteScript("afterResolveCaptcha");
        }

        return 0;
    }//end invisible_Recaptcha_Function
     //=================//	



    //=================//
    //Recaptcha_Function
    //=================//

    public int Recaptcha_Function()
    {

        /*
        //CaptchaChoose
        var dropdown = ElementByXPath("//select[contains(@name,'captcha_type')]");
        if ( GetBoolSetting("CaptchaChoose") )
        {
            SelectOptionByValue(dropdown , "1"); //SolveMedia
        }
        if ( !GetBoolSetting("CaptchaChoose") )
        {
            SelectOptionByValue(dropdown , "0"); //ReCaptcha
        }
        */

        //DoSolveImageCaptcha
        var SolveMedia = ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]");
        if (IsVisible(SolveMedia))
        {
            Log("DO SolveMedia");
            var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"), ElementByXPath("//input[@name='adcopy_response']"));
            if (result_2 > 0)
            {
                return Fail("SolveMedia - Fail solving captcha");
            }
        }

        /*
        var SolveMedia_Iframe_Animation_OR_Canvas = ElementByXPath ("//div[contains(@id,'adcopy-puzzle-image-image')] | //canvas[contains(@id,'slog')] ");
        if (IsVisible(SolveMedia_Iframe_Animation_OR_Canvas))
        {
          Log("SolveMedia_Iframe_Animation_OR_Canvas - visible - we select ReCaptcha - for protection");
          SelectOptionByValue(dropdown , "0"); //Choose to slolve with ReCaptcha - select ReCaptcha
        }
        */

        //for recaptcha popup after click on button - ("//div[contains(@style,'opacity: 1')]//iframe[contains(@src,'recaptcha')]")   
        var RecaptchaOpen_Iframe = ElementByXPath("//iframe[contains(@src,'recaptcha/api2/anchor')]");
        if (IsVisible(RecaptchaOpen_Iframe))
        {
            //SolveCaptcha if apper
            Log("DO Recaptcha");
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Recaptcha - Fail solving captcha");
            }
            FaucetCollector.Captcha.RecaptchaUtility utility = new FaucetCollector.Captcha.RecaptchaUtility(this);
            utility.DoSolve();
        }

        //HCaptcha
        var HCaptcha_Check = ElementByXPath("//iframe[contains(@src,'hcaptcha.com/captcha')]");
        if (IsVisible(HCaptcha_Check))
        {
            var result = DoHCaptcha();
            if (result > 0)
            {
                return result;
            }
        }
		
        //IconCaptcha
        FaucetCollector.Captcha.IconCaptchaSolver solver = new FaucetCollector.Captcha.IconCaptchaSolver(this); //call

        if (solver.IsVisibleIconCaptcha())
        {
            Log("IconCaptcha - here");
            bool success = solver.DoSolve();
            if (success)
            {
                var IconCaptcha_Success = ElementByXPath("//div[@class='captcha-modal__icons-title' and contains(text(),'Great')]");
                if (IsVisible(IconCaptcha_Success))
                {
                    Log("IconCaptcha - Success_Claim ");
                    //ClaimSuccess(); //Marks the claim as a success
                }
            }
        }

        return 0;
    }//end Recaptcha_Function
     //=================//	


} //public class
