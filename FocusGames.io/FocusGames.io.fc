
//==================//
//script Written by: ••AviramDayan•• 15/07/2020 17:00AM - Version 1
//Last Update: 09/04/2021 19:00PM - Version 5
//==================//

using FaucetCollector.Script;
using System;
//css_ref FaucetCollector.Utilities
//css_ref FaucetCollector.Captcha


public class FocusGames : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://FocusGames.io")
            {
                new FaucetSetting(){Name="Email",Display="UserName",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},

                new FaucetSetting(){Name="FaucetClaim",Display="FaucetClaim",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="DailyActiveClaim",Display="DailyActiveClaim",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting() { Name = "CaptchaChoose", Display = "ON SolveMedia / OFF ReCaptcha", Type = EditorType.CheckBox, Default = true },			

                new FaucetSetting(){Name="AutoWithdraw",Display="AutoWithdraw",Type=EditorType.CheckBox,Default=true},
				new FaucetSetting() { Name = "Limit_Withdraw", Display = "Limit_Withdraw", Type = EditorType.TextBox, Default = 18600 }, //if there is a problem with "Numeric" so cahnge to "TextBox"                
                new FaucetSetting(){Name="Address",Display="Address TRX",Type=EditorType.TextBox,Required=true},			
			
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }


    //My DomainName
    //string DomainName_String = "https://FocusGames.io";
    //example - GoToUrl(DomainName_String);
    //==========//


    //============================================================//
    //the number of "successes" in the script - when are finished  
    //============================================================//
    public override void Start( )
    {
        ad=false;

        //Title that shows in the browser. Is used to identify and close popup windows
        Title="FocusGames";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath="//*"; //*[text()='']
        FailXPath="//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start( );
    }
    //============================================================//
    //the number of "successes" in the script - when are finished  
    //============================================================//



    bool ad;


    public override int DoInit( )
    {


        //Let Faucet Collector continue.
        return base.DoInit( );
    }




    //==================//
    //save Login Cookies 
    //==================//
    public override bool IsLoggedIn( )
    {
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//div[contains(@class,'dropdown-toggle')]")!=null;
        //return true;
    }
    //==================//
    //save Login Cookies 
    //==================//





    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin( )
    {


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin( );
    }




    //========//
    //DoLogin
    //========//
    public override int DoLogin( )
    {

        var ExitButton = ElementByXPath("//div[contains(@class,'dropdown-toggle')]");

        //if i NOT Login - go to Login Page
        if ( !IsVisible(ExitButton) )
        {

            GoToUrl("https://focusgames.io/login");
            Wait( );
            Wait(2);

            var Email_VAR = ElementByXPath("//input[@name='username']");
            if ( IsVisible(Email_VAR) )
            {
                SetText(Email_VAR , GetSetting("Email"));
            }

            Wait(2);

            var Password_VAR = ElementByXPath("//input[@name='password']");
            if ( IsVisible(Password_VAR) )
            {
                SetText(Password_VAR , GetPassword("Password"));
            }

            Wait(4);

            Recaptcha_Function( ); //call

            Wait(2);

            var ButtonLog = ElementByXPath("//button[@type='submit']");
            if ( IsVisible(ButtonLog) )
            {
                Click(ButtonLog);
            }

            Wait( );

        } // end ExitButton


        return base.DoLogin( );
    }
    //========//
    //DoLogin
    //========//






    //==========//
    //AfterLogin
    //=========//
    public override int AfterLogin( )
    {


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin( );
    }
    //==========//
    //AfterLogin
    //=========//





    //=============//
    //GetFaucetWaitTime
    //=============//
    public override int GetFaucetWaitTime( )
    {

        if ( ad )
        {
            ad=false; //solve the problem in start - after he return to script again
            return GetWaitSetting( );
        }   //end ad

        //let Faucet Collector continue.
        return base.GetFaucetWaitTime( );
    }
    //=============//
    //GetFaucetWaitTime
    //=============//





    public override int BeforeSolveCaptcha( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha( );
    }


    public override int DoSolveCaptcha( )
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha( );
    }


    public override int AfterSolveCaptcha( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha( );
    }



    public override int BeforeSolveFaucet( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha( );
    }





    //=============//
    //DoSolveFaucet
    //=============//
    public override int DoSolveFaucet( )
    {

      //=============//
      //AutoWithdraw
      //=============//
      if (GetBoolSetting("AutoWithdraw"))
      {
          GoToUrl("https://focusgames.io/wallet/withdraw");
          Wait();
          Wait(4);
		  
          var BalanceVAR = ElementByXPath("//div[contains(@class,'btn-group')]//label[1]//div[2]/div");
          string BalanceSTRING = BalanceVAR.Text.Trim().Replace(",", "").Replace("FGN", "").Split('.')[0];
          int BalanceINT = Convert.ToInt32(BalanceSTRING);
		  
          int MyAmount;
          Int32.TryParse(GetSetting("Limit_Withdraw"), out MyAmount);
		  
          if (IsVisible(BalanceVAR) && BalanceINT < MyAmount) // under 10000
          {
             Log("Limit_Withdraw - the balance under < " + MyAmount + " not good");
             //do all stuff
          }
		  
          if (IsVisible(BalanceVAR) && BalanceINT > MyAmount) // above 10000
          {

              Log("Limit_Withdraw - the balance above > " + MyAmount + " good your amount is " + BalanceVAR.Text );
              Wait(2);
              var InputAmount = ElementByXPath("//input[@name='amount']");		
              SetText(InputAmount, GetSetting("Limit_Withdraw"));
              Wait(2);
              var AddressVAR = ElementByXPath("//input[@name='address']");		
              SetText(AddressVAR, GetSetting("Address"));
              Wait(2);
              var WithdrawButton = ElementByXPath("//button[contains(text(),'ithdraw')]");		
              Click(WithdrawButton);
              Wait(2);		  
              ClaimSuccess(); //Marks the claim as a success
              Log("Limit_Withdraw - Success");	
              Wait();
			  
          }

      } //end AutoWithdraw
      //=============//


        //=============//
        //DailyActiveClaim
        //=============//
        if ( GetBoolSetting("DailyActiveClaim") )
        {

            GoToUrl("https://focusgames.io/bonus");
            Log("DailyActiveClaim - go to ");
            Wait( );
            Wait(4);

            var ClaimAvailable = ElementByXPath("//div[contains(@class,'page-content-holder')]//div[contains(@class,'card-body')]//button[contains(text(),'CLAIM')]");

            if ( !IsVisible(ClaimAvailable) )
            {
                Log("DailyActiveClaim - Not here - try next time ");
            }

            if ( IsVisible(ClaimAvailable) )
            {
                Log("DailyActiveClaim - Available ");
                Click(ClaimAvailable);
                Wait(6);
                Log("DailyActiveClaim - Success ");
                var SuccessMessage = ElementByXPath("//div[contains(@class,'alert-success alert-dismissible')]");
                Log(SuccessMessage.Text);
                ClaimSuccess( ); //Marks the claim as a success
            }

        } //end DailyActiveClaim
          //=============//


        //=============//
        //FaucetClaim
        //=============//
        if ( GetBoolSetting("FaucetClaim") )
        {

            var TimeToWaitForBreak = DateTime.Now.AddSeconds(1200); //1200sec = 20min
            while ( true )
            {

                GoToUrl("https://focusgames.io/faucet");
                Log("FaucetClaim - go to ");
                Wait( );
                Wait(4);

                var CheckStuff = ElementByXPath("//button[contains(text(),'Claim FREE')] | //button[contains(text(),'Complete')] ");

                if ( !IsVisible(CheckStuff) )
                {
                    Log("FaucetClaim - Not here - try next time - break the loop ");
                    break;
                }

                if ( IsVisible(CheckStuff) )
                {
                    Log("FaucetClaim - Available ");
                    var ClaimButton = ElementByXPath("//button[contains(text(),'Claim FREE')]");
                    Click(ClaimButton);
                    FaucetCollector.Utilities.Adblock adblock= new FaucetCollector.Utilities.Adblock(this);
                    adblock.DestroyAds( );
                    Wait(5);

                    Recaptcha_Function( ); //call if apper

                    var CompleteClaimButton = ElementByXPath("//button[contains(text(),'Complete')]");

                    if ( !IsVisible(CompleteClaimButton) )
                    {
                        Log("FaucetClaim - break - not Available");
                        break;
                    }

                    if ( IsVisible(CompleteClaimButton) )
                    {
                        Log("FaucetClaim - CompleteClaimButton");
                        Click(CompleteClaimButton);

                        Wait(2);

                        var SuccessMessage = ElementByXPath("//div[contains(@class,'alert alert-success')]");
                        Log(SuccessMessage.Text);
                        ClaimSuccess( ); //Marks the claim as a success			  
                    }

                    Wait(3);

                } //end CheckStuff

                if ( DateTime.Now>TimeToWaitForBreak ) //if the time above 65 sec 
                {
                    Log("FaucetClaim - break - TimeToWaitForBreak");
                    break; //break the wait loop
                }

            }//end while

        } //end FaucetClaim
          //=============//

        return Time_Function( );

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet( );
    }




    public override int AfterSolveFaucet( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet( );
    }




    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult( );
    }



    //=================//
    //Time_Function
    //=================//
    public int Time_Function( )
    {

        var MinVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[2]/span[1]") ;
        var SecVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[3]/span[1]") ;

        if ( IsVisible(MinVar) )
        {
            Log("ClaimBTC - WaitTimerText apper - return to site time");
            int min,sec;
            min=Convert.ToInt32(MinVar.Text.Trim( ).Replace("m." , "").Replace("s." , "").Split(' ')[0])*60;
            sec=Convert.ToInt32(SecVar.Text.Trim( ).Replace("m." , "").Replace("s." , "").Split(' ')[1]);
            return min+sec;
        }

        if ( !IsVisible(MinVar) )
        {
            Log("ClaimBTC - return to your time");
            return GetWaitSetting( );
        }

        return 0;
    }//end Time_Function
     //=================//	


    //=================//
    //Recaptcha_Function
    //=================//

    public int Recaptcha_Function( )
    {

        //CaptchaChoose
        var dropdown = ElementByXPath("//select[contains(@name,'captcha_type')]");
        if ( GetBoolSetting("CaptchaChoose") )
        {
            SelectOptionByValue(dropdown , "1"); //SolveMedia
        }
        if ( !GetBoolSetting("CaptchaChoose") )
        {
            SelectOptionByValue(dropdown , "0"); //ReCaptcha
        }

        //DoSolveImageCaptcha
        var SolveMediaNormal = ElementByXPath ("//img[contains(@id,'adcopy-puzzle-image-image')]");
        if (IsVisible(SolveMediaNormal))
        {
            Log("DO SolveMedia");
            var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"),ElementByXPath("//input[@name='adcopy_response']"));
        }

        var SolveMedia_Iframe_Animation_OR_Canvas = ElementByXPath ("//div[contains(@id,'adcopy-puzzle-image-image')] | //canvas[contains(@id,'slog')] ");
        if (IsVisible(SolveMedia_Iframe_Animation_OR_Canvas))
        {
          Log("SolveMedia_Iframe_Animation_OR_Canvas - visible - we select ReCaptcha - for protection");
		  SelectOptionByValue(dropdown , "0"); //Choose to slolve with ReCaptcha - select ReCaptcha
		}

        //for recaptcha popup after click on button - ("//button[contains(@class,'reload')] | //button[contains(@id,'reload')] ")
        var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]");
        if ( IsVisible(RecaptchaOpen_Iframe) )
        {
            //SolveCaptcha if apper
            Log("DO Recaptcha");
            var result = base.DoSolveCaptcha();
            if ( result>0 )
            {
                return Fail("Fail solving captcha");
            }
            FaucetCollector.Captcha.RecaptchaUtility utility = new FaucetCollector.Captcha.RecaptchaUtility(this);
            utility.DoSolve( );
        }

        return 0;
    }//end Recaptcha_Function
     //=================//	



} //public class
