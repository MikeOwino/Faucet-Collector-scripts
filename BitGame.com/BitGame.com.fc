
//==================//
//script Written by: ••AviramDayan•• 17/04/2021 21:00PM - Version 1
//Last Update: 17/04/2021 22:00PM - Version 1
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using System.Text.RegularExpressions;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Drawing;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Globalization;

//css_ref FaucetCollector.Utilities
//css_inc RecaptchaUtilities
/*  css_inc IconCaptcha  */

public class BitGameCom : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://BitGame.com")
            {
                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},
                new FaucetSetting() { Name = "GetActivityToken", Display = "GetActivityToken - on/off to play in casino games (it's recommended to set the time every 360 min '6 hours') ", Type = EditorType.CheckBox, Default = true},				

                new FaucetSetting() { Name = "ExclusiveBonusDrop_Telegram", Display = "Exclusive Bonus Drop - ON/OFF - in Telegram - 'bitsler.com - Play Smarter' - Public Channel", Type = EditorType.CheckBox, Default =true},	
				
                //new FaucetSetting() { Name = "FaucetClaim", Display = "FaucetClaim", Type = EditorType.CheckBox, Default = true},	
 
				
            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "BitGame";

	    SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {

        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//a[contains(text(),'Logout')]")!= null;
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {

     GoToUrl("https://BitGame.com/");
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {
	
      var ExitButton = ElementByXPath("//a[contains(text(),'Logout')]");
	
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

		GoToUrl("https://BitGame.com/Account/Login");
		Wait();		
		Wait(2);

        var LoginButtonStart = ElementByXPath("//button[contains(text(),'Login')]");
	    if (IsVisible(LoginButtonStart))
	    {
			Click(LoginButtonStart);
		}
		
		Wait(4);	
		
        var box_user = ElementByXPath("//input[@id='username']");
	    if (IsVisible(box_user))
	    {
        SetText(box_user, GetSetting("Email"));
		}
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[@id='password']");
	    if (IsVisible(box_pass))
	    {
        SetText(box_pass, GetPassword("Password"));
		}
		
		Wait(2);
		
        var ButtonLog = ElementByXPath("//button[@type='submit']");
	    if (IsVisible(ButtonLog))
	    {
        Click(ButtonLog);
		}
		
		invisible_Recaptcha_Function(); //call if visible
		
		Wait();	

	 } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
	    //Log("return ad");
	    ad=false;
        return GetWaitSetting();
        }

        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {


		//======//
		//ExclusiveBonusDrop_Telegram//
		//======//
        if (GetBoolSetting("ExclusiveBonusDrop_Telegram"))
        {
	      CheckForPopupsEnabled = false;    //disable

	      Title="Bitgame";		
		  
          GoToUrl("https://t.me/s/Bitgame02");
	      Log("Go to try - ExclusiveBonusDrop_Telegram");	
	      Wait();
	      Wait(5);	

            //Vertical - scrollHeight | scrollTop   //Horizontal - | scrollWidth | scrollLeft
            ExecuteScript("window.scrollTo(0, document.body.scrollTop)"); //if some elements not found in html - just before need to do `scrollTop` to find some elements
            Wait(3);
            ExecuteScript("window.scrollTo(0, document.body.scrollTop)"); //again
            Wait(3);
			
            var ExclusiveBonusDrop_Telegram_Last = ElementsByXPath("//div[contains(@class,'tgme_widget_message_text js-message_text') and contains(., 'activity') ]//a[1]");
            var ElementsToCheck = ExclusiveBonusDrop_Telegram_Last.LastOrDefault();

            if (ElementsToCheck ==null) // Not Visible
            {
	           Log("ElementsToCheck - NOT found");
			}
			
            if (ElementsToCheck !=null) //Visible  
            {
			   Click(ElementsToCheck);
	           Log("ElementsToCheck - here");
			   
               Driver.SwitchTo().Window(Driver.WindowHandles[1]); 
			   
			   Wait(5);
			   
               Driver.SwitchTo().Window(Driver.WindowHandles[0]); 
			   
               CheckForPopupsEnabled = true;     //enable
               CheckForPopups();    //call		
			   
	           Title="Bitgame";		  
               GoToUrl("https://BitGame.com");	  
            }
	
        } //end ExclusiveBonusDrop_Telegram
		//==============//


		//==============//
		//GetActivityToken//
		//==============//
        if (GetBoolSetting("GetActivityToken"))
        {

        GoToUrl("https://bitgame.com/activityCenter");
		Log("GetActivityToken - Go to promotions , we just waiting 20 seconds, to act normal and get the bounos daily");	
		
        Wait();
        Wait(20);
        }	
		//==============//
		
		
        return Time_Function();	

        //We are good to continue
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	

	
        //=================//
        //Time_Function
        //=================//
        public int Time_Function()
        {

           //site time with date - example 10:00 PM | 10:00 AM  OR UTC LocalTime
           var CheckAvailableGeneral = ElementByXPath("//div[contains(@id,'result') and contains(text(),'wait') or contains(text(),'UTC') ]");
           if (IsVisible(CheckAvailableGeneral))
           {
	         Log("ParseExact - here - check ");   
			 
	         var XpathTimeVAR = ElementByXPath("//div[contains(@class,'fqakeD')]/span[1]/span");
			 if (IsVisible(XpathTimeVAR))
             {
	           Log("XpathTimeVAR - Element - LocalTime - Visible - return to site time"); 
			   
	           var TimeVAR = DateTime.ParseExact(XpathTimeVAR.Text.Trim(),"t", new CultureInfo("en-US") ); //AM-PM -- t = Short time pattern - for all info here: predefined formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings  | custom formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings			  			   
	           //var TimeVAR = DateTime.ParseExact(XpathTimeVAR.Text.Trim(),"yyyy-MM-dd HH:mm:ss", new CultureInfo("en-US") ).ToLocalTime(); //UTC -- yyyy-MM-dd HH:mm:ss =  LocalTime - for all info here: predefined formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings  | custom formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings			  
	           //return (int)((TimeVAR - DateTime.Now).TotalSeconds);
			   
               var TimeNode = (int)((TimeVAR - DateTime.Now).TotalSeconds);
               return TimeNode>0 ? TimeNode : GetWaitSetting();  //in case the "ParseExact" fails it will go to "GetWaitSetting"
		     }
			 
			 if (!IsVisible(XpathTimeVAR))
             {
	           Log("XpathTimeVAR - Element - LocalTime - NOT Visible");  
		     }
			 
           } //end CheckAvailableGeneral

			 
		   //site time with normal counter
           var MinVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[2]/span[1]") ;
		   var SecVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[3]/span[1]") ;

           if (IsVisible(MinVar))
           {
	         Log("Time_Function - WaitTimerText apper - return to site time"); 
             int min,sec;
             min = Convert.ToInt32(MinVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[0])*60;
             sec = Convert.ToInt32(SecVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[1]);
             return min+sec;
           } 

           if (!IsVisible(MinVar))
           {
	            Log("Time_Function - return to your time"); 
		        return GetWaitSetting();
           }

	       Log("Time_Function - return to your time - backup general"); 
		   return GetWaitSetting(); //backup general

           return 0;		
        }//end Time_Function
        //=================//
		
	
        //=================//
       //invisible_Recaptcha_Function
        //=================//
        public int invisible_Recaptcha_Function()
        {
			
          var RecaptchaOpen_Iframe = ElementByXPath ("//div[contains(@style,'opacity: 1')]//iframe[contains(@src,'recaptcha')]");  
          if (RecaptchaOpen_Iframe !=null)          
		  {
            //SolveCaptcha if apper
            Log("DO invisible_Recaptcha");	  
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Recaptcha - Fail solving captcha");
            }
		    RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		    
            Wait();
		    
            //ExecuteScript("afterResolveCaptcha");
		  }
		
		return 0;
        }//end invisible_Recaptcha_Function
        //=================//	



        //=================//
       //Recaptcha_Function
        //=================//

        public int Recaptcha_Function()
        {
			
          /*
          //CaptchaChoose
          var dropdown = ElementByXPath("//select[contains(@name,'captcha_type')]");
          if ( GetBoolSetting("CaptchaChoose") )
          {
              SelectOptionByValue(dropdown , "1"); //SolveMedia
          }
          if ( !GetBoolSetting("CaptchaChoose") )
          {
              SelectOptionByValue(dropdown , "0"); //ReCaptcha
          }
          */	
		  
          //DoSolveImageCaptcha
          var SolveMedia = ElementByXPath ("//img[contains(@id,'adcopy-puzzle-image-image')]"); 
          if (IsVisible(SolveMedia))
		  {  
            Log("DO SolveMedia");	  
	        var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"),ElementByXPath("//input[@name='adcopy_response']")); 
            if (result_2 > 0)
            {
                return Fail("SolveMedia - Fail solving captcha");
            }
		  }

          /*
          var SolveMedia_Iframe_Animation_OR_Canvas = ElementByXPath ("//div[contains(@id,'adcopy-puzzle-image-image')] | //canvas[contains(@id,'slog')] ");
          if (IsVisible(SolveMedia_Iframe_Animation_OR_Canvas))
          {
            Log("SolveMedia_Iframe_Animation_OR_Canvas - visible - we select ReCaptcha - for protection");
		    SelectOptionByValue(dropdown , "0"); //Choose to slolve with ReCaptcha - select ReCaptcha
		  }
          */
		  
	     //for recaptcha popup after click on button - ("//div[contains(@style,'opacity: 1')]//iframe[contains(@src,'recaptcha')]")   
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 
          if (IsVisible(RecaptchaOpen_Iframe))
		  {
            //SolveCaptcha if apper
            Log("DO Recaptcha");	  
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Recaptcha - Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		  }

          //HCaptcha
		  var HCaptcha_Check = ElementByXPath("//iframe[contains(@src,'hcaptcha.com/captcha')]");	
	      if (IsVisible(HCaptcha_Check))
	      {	
            var result=DoHCaptcha();
            if ( result>0 )
            {
                return result;
            }
		  }

          //IconCaptcha
		  /*
          var IconCaptcha_Check = ElementByXPath("//div[@class='captcha-modal__icons']");  
          if (IsVisible(IconCaptcha_Check))
		  {
		  Log("IconCaptcha - here");  
          IconCaptchaSolver solver=new IconCaptchaSolver(this); //call
		  
			var IconCaptcha_Success = ElementByXPath("//div[@class='captcha-modal__icons-title' and contains(text(),'Great')]");  
		    if (IsVisible(IconCaptcha_Success))
		    {
		     Log("IconCaptcha - Success_Claim ");  
		     //ClaimSuccess(); //Marks the claim as a success
			}
			
		  }	//end IconCaptcha
		  */

		return 0;
        }//end Recaptcha_Function
        //=================//	
	

	
} //end public class
