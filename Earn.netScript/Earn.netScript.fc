using FaucetCollector.Script;

using System.Collections.Generic;
using System.Linq;

//css_ref FaucetCollector.Utilities
public class EarnScript : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {

            return new FaucetSettings("about:blank")
            {
                new FaucetSetting()
                {
                    Name="User",
                    Type=EditorType.TextBox,
                    Required=true,
                    Display="Email"
                },
                new FaucetSetting()
                {
                    Name="Pass",
                    Type=EditorType.Password,
                    Required=true,
                    Display="Password"
                },
                new FaucetSetting()
                {
                    Name="SelectedFaucet",
                    Type=EditorType.ComboBox,
                    Default=AvailableFaucets.Keys.FirstOrDefault(),
                    Items=AvailableFaucets.Keys.ToList()
                }
            };
        }

    }

    Dictionary<string, string> AvailableFaucets = new Dictionary<string, string>
    {
        {"ETH","https://ethearn.net/" },
        {"LTC","https://ltcearn.net/" },
        {"BCH","https://bchearn.net/" }
    };


    private string FaucetUrl
    {
        get
        {

            string faucetSetting = GetSetting("SelectedFaucet");
            if (!string.IsNullOrEmpty(faucetSetting) && AvailableFaucets.ContainsKey(faucetSetting))
            {
                return AvailableFaucets[faucetSetting];
            }

            return AvailableFaucets.Values.FirstOrDefault();
        }
    }


    public override int DoInit()
    {
        Title = "Faucet|m:";
        SuccessXPath = "//div[@id='lucky_number']|//div[@id='lucky_number']//h3";
        FailXPath = "//div[@class='alert alert-default']";
        Url = FaucetUrl;
        return base.DoInit();
    }

    public override int DoLogin()
    {
        GoToUrl(FaucetUrl);
        Wait();
        var loginModal = ElementByXPath("//a[@data-target='#loginModal']");
        if (!IsVisible(loginModal))
        {
            return Fail("Login modal is not visible or not found");
        }
        Click(loginModal);

        Wait();

        var userBox = ElementByXPath("//div[@id='loginModal']//input[@name='email']");
        if (!IsVisible(userBox))
        {
            return Fail("User box is not visible or not found");
        }
        SetText(userBox, GetSetting("User"));

        var passwordBox = ElementByXPath("//div[@id='loginModal']//input[@name='password']");

        if (!IsVisible(passwordBox))
        {
            return Fail("Password box is not visible or not found");
        }

        SetText(passwordBox, GetPassword("Pass"));


        var loginBtn = ElementByXPath("//button[contains(text(),'LOGIN!')]");
        if (!IsVisible(loginBtn))
        {
            return Fail("login button is not visible or not found");
        }
        Click(loginBtn);

        return base.DoLogin();
    }

    public override bool IsLoggedIn()
    {
        return ElementByXPath("//a[contains(@href,'logout')]") != null;
    }

    public override int DoSolveFaucet()
    {
        string FaucetUrl = this.FaucetUrl + "/home";
        GoToUrl(FaucetUrl);
        Wait(1, 2);
        var claimBtn = ElementByXPath("//div[contains(@id,'roll')]//a[contains(@class,'btn')]");
        if (!IsVisible(claimBtn))
        {
            return Fail("Claim btn is not visible or not found");
        }
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return result;
        }

        //use js no popup
        ExecuteScript("arguments[0].click()", claimBtn);
        Wait(1, 2);


        return base.DoSolveFaucet();
    }

    public override int DoSolveCaptcha()
    {
        var result = base.DoSolveCaptcha();
        if (result > 0)
        {
            return result;
        }

        FaucetCollector.Captcha.RecaptchaUtility recaptchaUtility = new FaucetCollector.Captcha.RecaptchaUtility(this);

        recaptchaUtility.DoSolve();

        return result;
    }
    public override int GetFaucetWaitTime()
    {

        var minutes = ElementByXPath("//div[@id='CDT']//span[contains(@class,'number min')]");
        var hours = ElementByXPath("//div[@id='CDT']//span[contains(@class,'number hour')]");

        var seconds = ElementByXPath("//div[@id='CDT']//span[contains(@class,'number sec')]");

        if (IsVisible(minutes) && IsVisible(hours) && IsVisible(seconds))
        {
            int minutesN, hoursN, secondsN;

            if (int.TryParse(minutes.Text, out minutesN) && int.TryParse(hours.Text, out hoursN) && int.TryParse(seconds.Text, out secondsN))
            {
                return minutesN * 60 + hoursN * 3600 + secondsN;
            }
        }


        return base.GetFaucetWaitTime();
    }

}
