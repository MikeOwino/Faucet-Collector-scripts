
//==================//
//script Written by: ••AviramDayan•• 01/02/2020 10:30AM - Version 1
//Last Update: 08/03/2021 17:30PM - Version 5
//==================//

using FaucetCollector.Script;

using System;
using System.Collections.Generic;
using System.Linq;

//css_ref FaucetCollector.Utilities

public class HaugamesScript : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://hauGames.club")
            {
                new FaucetSetting(){Name="Email",Display="Your Email (important not UserName)",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},

                new FaucetSetting(){Name="FaucetClaim",Display="Selected Faucet",Type=EditorType.ComboBox,Items = AvailableFaucets.Keys.ToList(), Default=AvailableFaucets.Keys.FirstOrDefault()},		
                
			

            };
        }
    }

    private readonly Dictionary<string, string> AvailableFaucets = new Dictionary<string, string>()
    {
        {"NEO","https://haugames.club/earn-crypto-coins/neo-earning" },
        {"NANO","https://haugames.club/earn-crypto-coins/nano-earning" },
        {"DAI","https://haugames.club/earn-crypto-coins/dai-earning" },
        {"ZCOIN","https://haugames.club/earn-crypto-coins/zcoin-earning" },
        {"NEM","https://haugames.club/earn-crypto-coins/nem-earning" }
    };


    private string UrlFaucet
    {
        get
        {
            var selectedSetting = GetSetting("FaucetClaim");
            if (!string.IsNullOrEmpty(selectedSetting) && AvailableFaucets.ContainsKey(selectedSetting))
            {
                return AvailableFaucets[selectedSetting];
            }
            return AvailableFaucets.Values.FirstOrDefault();

        }
    }
    public override void Start()
    {

      
        Title = "haugames";

      
        SuccessXPath = "//h2[contains(text(),'Rewards Table')]"; 
        FailXPath = "//*[@class='alert alert-danger']]"; 


        base.Start();
    }

    public override bool IsLoggedIn()
    {

      
        return ElementByXPath("//a[contains(@href,'logout')]") != null;

    }


    public override int DoLogin()
    {
        GoToUrl("https://haugames.club/login");
        Wait(1);

        var ExitButton = ElementByXPath("//a[contains(@href,'logout')]");

        //if i NOT Login - go to Login Page
        if (!IsVisible(ExitButton))
        {


            var emailBox = ElementByXPath("//input[@name='user_email']");
            if (!IsVisible(emailBox))
            {
                return Fail("Email box is not visible or not found");
            }
            SetText(emailBox, GetSetting("Email"));

            Wait(2);

            var passwordBox = ElementByXPath("//input[@type='password'] ");
            if (IsVisible(passwordBox))
            {
                return Fail("Password box is not visible or not found");
            }
            SetText(passwordBox, GetPassword("Password"));


            var captchaResult = Recaptcha_Function(); 
            if (captchaResult > 0)
            {
                return captchaResult;
            }

            var loginButton = ElementByXPath("//input[@name='user_login']");
            if (!IsVisible(loginButton))
            {
                return Fail("Login button is not visible or not found");
            }
            Click(loginButton);

            Wait();

        } 


        return base.DoLogin();
    }

    public override int GetFaucetWaitTime()
    {

        GoToUrl(UrlFaucet);

        Wait();

        var countDownElements = ElementsByXPath("//span[@class='countdown-amount']")
            .Where(el => IsVisible(el) && !string.IsNullOrEmpty(el.Text)).ToList();

        if (countDownElements.Count == 3 )
        {
            int hours, minutes, seconds;

            if(int.TryParse(countDownElements[0].Text, out hours) &&
                int.TryParse(countDownElements[1].Text,out minutes) 
                && int.TryParse(countDownElements[2].Text,out seconds))
            {
                return hours * 3600 + minutes * 60 + seconds;
            }

        }

        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }

    public override int DoSolveFaucet()
    {



        Title = "haugames";

        GoToUrl(UrlFaucet);

        Wait();

        var claimButton = ElementByXPath("//button[@name='claim']");
        if (!IsVisible(claimButton))
        {
            return Fail("Button init claim is not visible or not found");
        }

        Click(claimButton);
        Title = "tpkom";

        Wait(1);

        DateTime timeout = DateTime.Now.AddSeconds(20);
        var nextButton = ElementByXPath("//button[contains(@class,'timer_v')]");
        while (IsVisible(nextButton) && !nextButton.Enabled && DateTime.Now < timeout)
        {
            Wait(1);
        }
        if (!IsVisible(nextButton))
        {
            return Fail("Button to finish the claim is not visible or not found");
        }
        Click(nextButton);


        Wait(3, 4);


   
        return base.DoSolveFaucet();
    }

    public override int CheckFaucetResult()
    {
        Reload = true;

        return base.CheckFaucetResult();
    }

    public int Recaptcha_Function()
    {

     
        var RecaptchaOpen_Iframe = ElementByXPath("//iframe[contains(@src,'recaptcha/api2/anchor')]");
        if (IsVisible(RecaptchaOpen_Iframe))
        {
            //SolveCaptcha if apper
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solving captcha");
            }
            FaucetCollector.Captcha.RecaptchaUtility utility = new FaucetCollector.Captcha.RecaptchaUtility(this);
            utility.DoSolve();
        }

        return 0;
    }

} 
