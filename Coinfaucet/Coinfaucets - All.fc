using FaucetCollector.Script;

using System;
using System.Collections.Generic;
using System.Linq;
//css_ref FaucetCollector.Utilities
//css_ref FaucetCollector.Captcha
class Coinfaucets : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {

            return new FaucetSettings("about:blank")
            {
                new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="Faucet",Display="Faucet Selected",Type=EditorType.ComboBox,Items=Faucets.Keys.ToList(),Default=Faucets.Keys.FirstOrDefault()},
                new FaucetSetting(){Name="AutoWithdraw",Display="AutoWithdraw",Type=EditorType.CheckBox,Default=false },
                new FaucetSetting(){Name="Retry", Display="Number of Retries without refresh" , Type=EditorType.Numeric , Default=1  }
            };
        }
    }
    private class Coinfaucet
    {
        public double MinWithdraw { get; set; }
        public string Url { get; set; }
    }
    private Dictionary<string, Coinfaucet> Faucets = new Dictionary<string, Coinfaucet>()
    {
        {"NEM",new Coinfaucet
        {
            Url="https://freenem.com/",
            MinWithdraw=1
        } },
        {"Cardano",new Coinfaucet
        {
            Url="https://freecardano.com/",
            MinWithdraw=1
        } },
        {"XRP",new Coinfaucet
        {
            Url="https://coinfaucet.io/",
            MinWithdraw=1

        } },
        {
            "Bitcoin",new Coinfaucet
            {
                Url="https://freebitcoin.io/",
                MinWithdraw=0.0002
            }
        },
        {"Steam",new Coinfaucet
            {
            Url="https://freesteam.io/",
            MinWithdraw=1

            }
        },
        {"Tether",new Coinfaucet
        {
            Url="https://freetether.com/",
            MinWithdraw=1
        }
        },
        {"USD",new Coinfaucet
        {
            Url="https://freeusdcoin.com/",
            MinWithdraw=1
        }
        },
        {"Binance Coin",new Coinfaucet
        {
            Url="https://freebinancecoin.com/",
            MinWithdraw=1
        }
        },
        {"Ethereum",new Coinfaucet
        {
            Url="https://freeethereum.com/",
            MinWithdraw=0.1
        }
        },
        {"TRON",new Coinfaucet
        {
            Url="https://free-tron.com/",
            MinWithdraw=1
        }
        },
        {"DASH",new Coinfaucet
        {
            Url="https://freedash.io/",
            MinWithdraw=1

        } },
        {"NEO",new Coinfaucet{
            Url="https://freeneo.io/",
            MinWithdraw=1
        }


        },
        {"LINK",new Coinfaucet{
            Url="https://freechainlink.io/",
            MinWithdraw=0.1
        }
        },
         {
            "LTC",new Coinfaucet{
                Url="https://free-ltc.com/",
                MinWithdraw=0.5
        }  
        },
        {
            "DOGE",
            new Coinfaucet
            {
                Url="https://free-doge.com/",
                MinWithdraw=10
            }
        }
    };



    private string Url_
    {
        get
        {
            var Key = KeySelected;
            if (Faucets.ContainsKey(Key))
            {

                return Faucets[Key].Url;
            }


            return Faucets.Values.FirstOrDefault().Url;

        }
    }

    private string FaucetUrl
    {
        get
        {
            return Url_ + "free";
        }
    }

    private int Retries
    {
        get
        {
            return GetIntSetting("Retry", 1);
        }
    }
    private string KeySelected
    {
        get
        {
            var Key = GetSetting("Faucet");

            if (Faucets.ContainsKey(Key))
            {

                return Key;
            }

            return Faucets.Keys.FirstOrDefault();
        }
    }
    public override void Start()
    {
        Title = KeySelected;
        SuccessXPath = "//div[@class='result']";
        FailXPath = "//div[@class='error']";
        base.Start();
        Url = Url_;



    }

    public override bool SetHCaptchaResponse(string response)
    {


        if (ElementByXPath("//*[@name='g-recaptcha-response']") != null)
        {
            ExecuteScript("document.querySelector('[name=g-recaptcha-response]').innerText = '" + response + "'");
        }
        if (ElementByXPath("//*[@name='h-captcha-response']") != null)
        {
            ExecuteScript("document.querySelector('[name=h-captcha-response]').innerText = '" + response + "'");

        }

        var hcaptchaIframe = ElementByXPath("//iframe[contains(@src,'hcaptcha.com/captcha')]");

        if (hcaptchaIframe != null)
        {
            ExecuteScript("arguments[0].setAttribute('data-hcaptcha-response','" + response + "');", hcaptchaIframe);
        }

        return true;
    }


    public override string GetHCaptchaSiteKey()
    {
        var hcaptchaIframe = ElementByXPath("//iframe[contains(@src,'hcaptcha.com/captcha')]");

        if (hcaptchaIframe != null)
        {
            string src = hcaptchaIframe.GetAttribute("src");

            if (!string.IsNullOrEmpty(src))
            {
                // we find the sitekey 
                var queryParams = src.Split('&').ToList();
                // we remove the host part 

                queryParams.RemoveAt(0);

                //we find the sitekey 

                string siteKey = queryParams.FirstOrDefault(param => param.ToLower().Contains("sitekey")).Split('=').LastOrDefault();


                return siteKey;

            }
        }

        return base.GetHCaptchaSiteKey();
    }
    public override int DoLogin()
    {
        GoToUrl(Url_);

        Wait(2);
        var UserBox = ElementByXPath("//div[contains(@class,'login-wrapper')]//input[@name='email']");
        if (!IsVisible(UserBox))
        {
            FaucetCollector.Utilities.CloudFlareUtilities cloudFlareUtilities = new FaucetCollector.Utilities.CloudFlareUtilities(this);

            cloudFlareUtilities.DoSolve();
        }

        UserBox = ElementByXPath("//div[contains(@class,'login-wrapper')]//input[@name='email']");
        if (!IsVisible(UserBox))
        {
            return Fail("Userbox not visible");
        }


        var PasswordBox = ElementByXPath("//div[contains(@class,'login-wrapper')]//input[@name='password']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password box not visible");
        }

        var Loginbtn = ElementByXPath("//div[contains(@class,'login-wrapper')]//button[contains(@class,'login')]");
        if (!IsVisible(Loginbtn))
        {
            return Fail("Login button not visible");
        }

        SetText(UserBox, GetSetting("User"));
        SetText(PasswordBox, GetPassword("Pass"));


        Click(Loginbtn);




        return base.DoLogin();
    }

    public override bool IsLoggedIn()
    {
        return ElementByXPath("//a[@href='/logout']") != null;
    }

    private double Balance
    {
        get
        {
            var BalanceElement = ElementByXPath("//li[@class='navbar-coins bg-1']//a");
            if (IsVisible(BalanceElement))
            {
                double bal;
                if (double.TryParse(BalanceElement.Text.Split(' ')[0].Trim(), out bal))
                {
                    return bal;
                }
            }

            return 0;
        }
    }
    private double MinWithdraw
    {
        get
        {
            return Faucets[KeySelected].MinWithdraw;
        }
    }
    public override int BeforeSolveFaucet()
    {
        double Balance = this.Balance;
        Log("Your balance is " + Balance.ToString());
        if (GetBoolSetting("AutoWithdraw") && Balance > MinWithdraw)
        {

            var BtnWithdraw = ElementByXPath("//a[contains(text(),'Withdraw All')]");
            var UseProfileAdd = ElementsByXPath("//a[text()='(Use Profile Address)' and @class='profile-wallet color-1']").LastOrDefault();
            var Btnsubmit = ElementsByXPath("//button[@class='main-button-2 main-button-blue withdraw-now bg-3']").LastOrDefault();
            if (IsVisible(BtnWithdraw) && IsVisible(UseProfileAdd) && IsVisible(Btnsubmit))
            {
                Click(BtnWithdraw);
                Wait(1);
                Click(UseProfileAdd);
                Wait(1);
                Click(Btnsubmit);
            }
        }

        return base.BeforeSolveFaucet();
    }
    public override int DoSolveFaucet()
    {

        int retries = this.Retries;

        int actualClaim = 0;
        while (actualClaim < retries)
        {

            GoToUrl(FaucetUrl);
            Wait(2);

            var ClaimBtn = ElementByXPath("//button[@class='main-button-2 roll-button bg-2']");

            if (!IsVisible(ClaimBtn))
            {
                return Fail("Claim btn is not visible");
            }

            DoSolveCaptcha();

            Click(ClaimBtn);

            DateTime timeout = DateTime.Now.AddSeconds(20);
            var successElem = ElementByXPath(SuccessXPath);
            while (DateTime.Now < timeout && !IsVisible(successElem))
            {

                Wait();
                successElem = ElementByXPath(SuccessXPath);


            }

            if (IsVisible(successElem))
            {
                break;
            }

            actualClaim++;

        }

        return base.DoSolveFaucet();
    }
    public override int GetFaucetWaitTime()
    {
        var Timers = ElementsByXPath("//div[@class='digits']").Where(x => IsVisible(x)).ToList();
        //visible
        if (Timers.Count == 2)
        {
            int M, S;

            if (int.TryParse(Timers[0].Text, out M) && int.TryParse(Timers[1].Text, out S))
            {
                return M * 60 + S;
            }
        }

        return base.GetFaucetWaitTime();
    }
    public override int DoSolveCaptcha()
    {
        if (IsVisible(ElementByXPath("//div[@class='g-recaptcha']")) && IsVisible(ElementByXPath("//iframe[contains(@src,'recaptcha')]")))
        {
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return result;
            }
            FaucetCollector.Captcha.RecaptchaUtility utility = new FaucetCollector.Captcha.RecaptchaUtility(this);
            utility.DoSolve();

            return result;
        }

        return 0;
    }
}

