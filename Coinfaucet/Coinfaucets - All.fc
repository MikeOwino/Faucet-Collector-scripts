
//============================================//
//script Written first by: cgerabit
//last update by: AviramDayan 24/05/2021 21:00PM - Version: 19
//============================================//

using System;
using System.IO;
using FaucetCollector.Script;
using System.Text.RegularExpressions;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Drawing;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Globalization;
using FaucetCollector.Utilities;

//css_ref FaucetCollector.FaucetTemplates
//css_inc RecaptchaUtilities
//css_ref FaucetCollector.Captcha
/* css_inc ShortLinkUtilities */
/* css_inc GetestCaptcha */

class Coinfaucets : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {

            return new FaucetSettings("about:blank")
            {
                new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="DoShortLink",Display="DoShortLink",Type=EditorType.CheckBox,Default=false},
                new FaucetSetting(){Name="Twitter_PromoCode",Display="Twitter_PromoCode",Type=EditorType.CheckBox,Default=true},
                
				new FaucetSetting(){Name="Faucet",Display="Faucet Selected",Type=EditorType.ComboBox,Items=Faucets.Keys.ToList(),Default=Faucets.Keys.FirstOrDefault()},
                new FaucetSetting(){Name="WalletAddress",Display="WalletAddress - only to remmber (Not required)",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="AutoSetWithdraw",Display="AutoSetWithdraw - on/off",Type=EditorType.CheckBox,Default=false},
				new FaucetSetting(){Name="AutoWithdraw",Display="AutoWithdraw",Type=EditorType.CheckBox,Default=false },				
                new FaucetSetting(){Name="Retry", Display="Number of Retries without refresh" , Type=EditorType.Numeric , Default=1  }
            };
        }
    }
    private class Coinfaucet
    {
        public double MinWithdraw { get; set; }
        public string Url { get; set; }
    }
    private Dictionary<string, Coinfaucet> Faucets = new Dictionary<string, Coinfaucet>()
    {
        {"NEM",new Coinfaucet
        {
            Url="https://freenem.com/",
            MinWithdraw=1
        } },
        {"Cardano",new Coinfaucet
        {
            Url="https://freecardano.com/",
            MinWithdraw=1
        } },
        {"XRP",new Coinfaucet
        {
            Url="https://coinfaucet.io/",
            MinWithdraw=1

        } },
        {
            "Bitcoin",new Coinfaucet
            {
                Url="https://freebitcoin.io/",
                MinWithdraw=0.0002
            }
        },
        {"Steam",new Coinfaucet
            {
            Url="https://freesteam.io/",
            MinWithdraw=1

            }
        },
        {"Tether",new Coinfaucet
        {
            Url="https://freetether.com/",
            MinWithdraw=1
        }
        },
        {"USD",new Coinfaucet
        {
            Url="https://freeusdcoin.com/",
            MinWithdraw=1
        }
        },
        {"Binance Coin",new Coinfaucet
        {
            Url="https://freebinancecoin.com/",
            MinWithdraw=1
        }
        },
        {"Ethereum",new Coinfaucet
        {
            Url="https://freeethereum.com/",
            MinWithdraw=0.1
        }
        },
        {"TRON",new Coinfaucet
        {
            Url="https://free-tron.com/",
            MinWithdraw=1
        }
        },
        {"DASH",new Coinfaucet
        {
            Url="https://freedash.io/",
            MinWithdraw=1

        } },
        {"NEO",new Coinfaucet{
            Url="https://freeneo.io/",
            MinWithdraw=1
        }


        },
        {"LINK",new Coinfaucet{
            Url="https://freechainlink.io/",
            MinWithdraw=0.1
        }
        },
         {
            "LTC",new Coinfaucet{
                Url="https://free-ltc.com/",
                MinWithdraw=0.5
        }  
        },
        {
            "DOGE",
            new Coinfaucet
            {
                Url="https://free-doge.com/",
                MinWithdraw=10
            }
        }
    };



    private string Url_
    {
        get
        {
            var Key = KeySelected;
            if (Faucets.ContainsKey(Key))
            {

                return Faucets[Key].Url;
            }


            return Faucets.Values.FirstOrDefault().Url;

        }
    }

    private string FaucetUrl
    {
        get
        {
            return Url_ + "free";
        }
    }

    private int Retries
    {
        get
        {
            return GetIntSetting("Retry", 1);
        }
    }
	
	
    private string KeySelected
    {
        get
        {
            var Key = GetSetting("Faucet");

            if (Faucets.ContainsKey(Key))
            {

                return Key;
            }

            return Faucets.Keys.FirstOrDefault();
        }
    }
	
	
    public override void Start()
    {
        Title = KeySelected;
        SuccessXPath = "//div[@class='result']";
        FailXPath = "//div[@class='error']";
        base.Start();
        Url = Url_;
    }


    public override int DoLogin()
    {
        GoToUrl(Url_);

        Wait(2);
        var UserBox = ElementByXPath("//div[contains(@class,'login-wrapper')]//input[@name='email']");
        if (!IsVisible(UserBox))
        {
            FaucetCollector.Utilities.CloudFlareUtilities cloudFlareUtilities = new FaucetCollector.Utilities.CloudFlareUtilities(this);

            cloudFlareUtilities.DoSolve();
        }

        UserBox = ElementByXPath("//div[contains(@class,'login-wrapper')]//input[@name='email']");
        if (!IsVisible(UserBox))
        {
            return Fail("Userbox not visible");
        }


        var PasswordBox = ElementByXPath("//div[contains(@class,'login-wrapper')]//input[@name='password']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password box not visible");
        }

        var Loginbtn = ElementByXPath("//div[contains(@class,'login-wrapper')]//button[contains(@class,'login')]");
        if (!IsVisible(Loginbtn))
        {
            return Fail("Login button not visible");
        }

        SetText(UserBox, GetSetting("User"));
        SetText(PasswordBox, GetPassword("Pass"));


        Click(Loginbtn);

        return base.DoLogin();
    }
	

    public override bool IsLoggedIn()
    {
        return ElementByXPath("//a[@href='/logout']") != null;
    }
	

    private double Balance
    {
        get
        {
            var BalanceElement = ElementByXPath("//li[@class='navbar-coins bg-1']//a");
            if (IsVisible(BalanceElement))
            {
                double bal;
                if (double.TryParse(BalanceElement.Text.Split(' ')[0].Trim(), out bal))
                {
                    return bal;
                }
            }

            return 0;
        }
    }
	
	
    private double MinWithdraw
    {
        get
        {
            return Faucets[KeySelected].MinWithdraw;
        }
    }
	
	
	
	
//==============//
//BeforeSolveFaucet
//==============//
    public override int BeforeSolveFaucet()
    {

        //=============//
        //AutoSetWallet
        //=============//
        if (GetBoolSetting("AutoSetWithdraw") && !string.IsNullOrEmpty(GetSetting("WalletAddress")))
        {			

		   Log("AutoSetWithdraw");
           GoToUrl(FaucetUrl+"/settings");	
		   Wait();
		
           var setwallet = ElementByXPath("//input[@class='form-control wallet-address']");
            if (IsVisible(setwallet))
            {
                SetText(setwallet, GetSetting("WalletAddress"));
               
                var passwordvar = ElementByXPath("//div[1]/div[2]/div[2]/div/div/div[2]/input[@class='form-control password']");
                if (IsVisible(passwordvar))
                {
                    SetText(passwordvar, GetPassword("Password"));
              
                    var ChangeWallet = ElementByXPath("//button[@class='main-button-2 change-wallet bg-2' and contains(text(),'Withdrawal')]");
                    if (IsVisible(ChangeWallet))
                    {
                        Click(ChangeWallet);
                        Wait();
                    }
                }
            }		           	      
		}
        //=============//

        //=============//
        //AutoWithdraw
        //=============//
        double Balance = this.Balance;
        Log("Your balance is " + Balance.ToString());
        if (GetBoolSetting("AutoWithdraw") && Balance > MinWithdraw)
        {

            var BtnWithdraw = ElementByXPath("//a[contains(text(),'Withdraw All')]");
            var UseProfileAdd = ElementsByXPath("//a[text()='(Use Profile Address)' and @class='profile-wallet color-1']").LastOrDefault();
            var Btnsubmit = ElementsByXPath("//button[@class='main-button-2 main-button-blue withdraw-now bg-3']").LastOrDefault();
            if (IsVisible(BtnWithdraw) && IsVisible(UseProfileAdd) && IsVisible(Btnsubmit))
            {
                Click(BtnWithdraw);
                Wait(1);
                Click(UseProfileAdd);
                Wait(1);
                Click(Btnsubmit);
            }
        }
        //=============//
		
        return base.BeforeSolveFaucet();
    }
//==============//

	

//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
 {


       //==============//
       //Twitter_PromoCode
       //==============//
       if (GetBoolSetting("Twitter_PromoCode"))
       {
    	 Title = "Twitter";
    
         GoToUrl("https://twitter.com/cryptosfaucets");
         Wait();
         Wait(3);
		 
		 /*
         ExecuteScript("window.scrollTo(0, document.body.scrollHeight)"); //scroll
         Wait(3);
         ExecuteScript("window.scrollTo(0, document.body.scrollHeight)"); //scroll
         Wait(3);
         */

         var GetCode = ElementByXPath("//div[contains(@aria-label,'Free Cryptos')]//span[contains(text(),'Promo Code')]"); //
         
         SetSetting("StoreCode", GetCode.Text.Trim().Replace("Valid","").Split(' ')[10] ); //
         Log( "the promo code is: " + GetSetting("StoreCode") );

		 Title = "Free";
      
         GoToUrl(FaucetUrl + "/promotion/" + GetSetting("StoreCode") );
         Wait(5);
		 
       } //end Twitter_PromoCode
        //=============//
	
	
       //=========//
       //Faucet
       //========//
        int retries = this.Retries;

        int actualClaim = 0;
        while (actualClaim < retries)
        {

            GoToUrl(FaucetUrl);
            Wait(2);

            var ClaimBtn = ElementByXPath("//button[@class='main-button-2 roll-button bg-2']");

            if (!IsVisible(ClaimBtn))
            {
                return Fail("Claim btn is not visible");
            }

            DoSolveCaptcha();

            Click(ClaimBtn);

            DateTime timeout = DateTime.Now.AddSeconds(20);
            var successElem = ElementByXPath(SuccessXPath);
            while (DateTime.Now < timeout && !IsVisible(successElem))
            {

                Wait();
                successElem = ElementByXPath(SuccessXPath);


            }

            if (IsVisible(successElem))
            {
                break;
            }

            actualClaim++;

        }
       //========//
	   

    //==============//
    //DoShortLink
    //==============//
     if (GetBoolSetting("DoShortLink"))
     {


            Log("DoShortLink");
            GoToUrl(FaucetUrl+"/free-rolls");
	        Wait();	  
			
            int N = CheckIfShortLinkIsAvailable();
            if (N != -1)
            {
                Log("Shortlink N÷:" + N.ToString() + " Available");
                var ShortLinks = ElementsByXPath("//a[contains(text(),'Link')]");
                if (ShortLinks.Count > N)
                {
                    try
                    {
                        string Href = ShortLinks[N].GetAttribute("href");
                        if (!string.IsNullOrEmpty(Href))
                        {
                            GoToUrl(Href);
                        }
                        else
                        {
                            CheckForPopupsEnabled = false;
                            Click(ShortLinks[N], false);
                            Driver.SwitchTo().Window(Driver.WindowHandles[1]);

                        }
                      
                
                        ShortLinkBypasser bypasser = new ShortLinkBypasser(this);
                        Wait(2, 3);
                        bool cs = bypasser.DoShortLink();
                        if (cs)
                        {
                            SetSetting("Link" + N.ToString(), DateTime.Now);
                            Log("ShortlinkSuccess");
                        }
                        else
                        {
                            Log("Fail Doing shortlink");
                        }
                    }// end try
                    finally
                    {

                        CheckForPopups();
                        Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    }
                }//end ShortLinks.Count > N
            }//end N != -1
            else
            {
                Log("No shortlinks avaible");
            }
 
	 }//DoShortLink
    //==============//
	

     return base.DoSolveFaucet();
 }
//==============//


	
	
	
    public override int GetFaucetWaitTime()
    {
        var Timers = ElementsByXPath("//div[@class='digits']").Where(x => IsVisible(x)).ToList();
        //visible
        if (Timers.Count == 2)
        {
            int M, S;

            if (int.TryParse(Timers[0].Text, out M) && int.TryParse(Timers[1].Text, out S))
            {
                return M * 60 + S;
            }
        }

        return base.GetFaucetWaitTime();
    }
	
	
	
	
 public override int DoSolveCaptcha()
 {
     if (IsVisible(ElementByXPath("//div[@class='g-recaptcha']")) && IsVisible(ElementByXPath("//iframe[contains(@src,'recaptcha')]")))
     {
         var result = base.DoSolveCaptcha();
         if (result > 0)
         {
             return result;
         }
         FaucetCollector.Captcha.RecaptchaUtility utility = new FaucetCollector.Captcha.RecaptchaUtility(this);
         utility.DoSolve();

         return result;
     }
	
  return 0;
		
 } 
	

//============================//
//SET & Get - HCaptchaSiteKey
//============================//
    public override bool SetHCaptchaResponse(string response)
    {


        if (ElementByXPath("//*[@name='g-recaptcha-response']") != null)
        {
            ExecuteScript("document.querySelector('[name=g-recaptcha-response]').innerText = '" + response + "'");
        }
        if (ElementByXPath("//*[@name='h-captcha-response']") != null)
        {
            ExecuteScript("document.querySelector('[name=h-captcha-response]').innerText = '" + response + "'");

        }

        var hcaptchaIframe = ElementByXPath("//iframe[contains(@src,'hcaptcha.com/captcha')]");

        if (hcaptchaIframe != null)
        {
            ExecuteScript("arguments[0].setAttribute('data-hcaptcha-response','" + response + "');", hcaptchaIframe);
        }

        return true;
    }


    public override string GetHCaptchaSiteKey()
    {
        var hcaptchaIframe = ElementByXPath("//iframe[contains(@src,'hcaptcha.com/captcha')]");

        if (hcaptchaIframe != null)
        {
            string src = hcaptchaIframe.GetAttribute("src");

            if (!string.IsNullOrEmpty(src))
            {
                // we find the sitekey 
                var queryParams = src.Split('&').ToList();
                // we remove the host part 

                queryParams.RemoveAt(0);

                //we find the sitekey 

                string siteKey = queryParams.FirstOrDefault(param => param.ToLower().Contains("sitekey")).Split('=').LastOrDefault();


                return siteKey;

            }
        }

        return base.GetHCaptchaSiteKey();
    }
//============================//


        //=================//
       //Captcha_All_Function
        //=================//

        public int Captcha_All_Function()
        {
			
          /*
          //CaptchaChoose
          var dropdown = ElementByXPath("//select[contains(@name,'captcha_type')]");
          if ( GetBoolSetting("CaptchaChoose") )
          {
              SelectOptionByValue(dropdown , "1"); //SolveMedia
          }
          if ( !GetBoolSetting("CaptchaChoose") )
          {
              SelectOptionByValue(dropdown , "0"); //ReCaptcha
          }
          */	
		  
          //DoSolveImageCaptcha
          var SolveMedia = ElementByXPath ("//img[contains(@id,'adcopy-puzzle-image-image')]"); 
          if (IsVisible(SolveMedia))
		  {  
            Log("DO SolveMedia");	  
	        var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"),ElementByXPath("//input[@name='adcopy_response']")); 
            if (result_2 > 0)
            {
                return Fail("SolveMedia - Fail solving captcha");
            }
		  }

          /*
          var SolveMedia_Iframe_Animation_OR_Canvas = ElementByXPath ("//div[contains(@id,'adcopy-puzzle-image-image')] | //canvas[contains(@id,'slog')] ");
          if (IsVisible(SolveMedia_Iframe_Animation_OR_Canvas))
          {
            Log("SolveMedia_Iframe_Animation_OR_Canvas - visible - we select ReCaptcha - for protection");
		    SelectOptionByValue(dropdown , "0"); //Choose to slolve with ReCaptcha - select ReCaptcha
		  }
          */
		  
	     //for recaptcha popup after click on button - ("//div[contains(@style,'opacity: 1')]//iframe[contains(@src,'recaptcha')]")   
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 
          if (IsVisible(RecaptchaOpen_Iframe))
		  {
            //SolveCaptcha if apper
            Log("DO Recaptcha");	  
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Recaptcha - Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		  }

          //HCaptcha
		  var HCaptcha_Check = ElementByXPath("//iframe[contains(@src,'hcaptcha.com/captcha')]");	
	      if (IsVisible(HCaptcha_Check))
	      {	
            var result=DoHCaptcha();
            if ( result>0 )
            {
                return result;
            }
		  }

          //IconCaptcha
          FaucetCollector.Captcha.IconCaptchaSolver solver = new FaucetCollector.Captcha.IconCaptchaSolver(this); //call
		  
          if (solver.IsVisibleIconCaptcha())
          {
              Log("IconCaptcha - here");
			  Wait(6);
              bool success = solver.DoSolve();
              if (success)
              {
                  var IconCaptcha_Success = ElementByXPath("//div[@class='captcha-modal__icons-title' and contains(text(),'Great')]");
                  if (IsVisible(IconCaptcha_Success))
                  {
                      Log("IconCaptcha - Success_Claim ");
                      //ClaimSuccess(); //Marks the claim as a success
                  }
              }
          }

          //Geetest - Captcha	
          /*		
          var Geetest_OLD_OR_NEW = ElementByXPath("//script[contains(@src,'static.geetest.com/static/js/slide') or contains(@src,'static.geetest.com/static/js/fullpage')]"); // slide OLD or fullpage NEW
          if (Geetest_OLD_OR_NEW != null) //visible
          {
            GetestCaptchaUtilities.GetestCaptcha getestCaptcha = new GetestCaptchaUtilities.GetestCaptcha(this); 
            bool res2 = getestCaptcha.DoInitSolve(); //call
          }
          */

		return 0;
        }//end Captcha_All_Function
        //=================//	


    public int CheckIfShortLinkIsAvailable()
    {
        var ShortLinks = ElementsByXPath("//a[contains(text(),'Link')]");
        int NumberOf = -1;
       for(int i = 0; i < ShortLinks.Count; i++)
        {
            string SettingLink = GetSetting("Link" + i.ToString());
            DateTime LastUsed;
           
            if(!string.IsNullOrEmpty(SettingLink) && DateTime.TryParse(SettingLink,out LastUsed))
            {
                if (LastUsed.AddHours(24) < DateTime.Now)
                {
                    return i;
                }

            }
            else
            {
                return i;
            }
           
        }


        return NumberOf;
    }
	
	
} //end class

