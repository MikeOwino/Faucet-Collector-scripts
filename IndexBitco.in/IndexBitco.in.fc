
//============================================//
//script Written first by: cgerabit 22/02/2019
//last update by: AviramDayan 20/05/2021 16:00PM - Version: 16
//============================================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Linq;
using System.Collections.Generic;
using System.Globalization;
using FaucetCollector.Utilities;

//css_ref FaucetCollector.FaucetTemplates
//css_inc RecaptchaUtilities
//css_ref FaucetCollector.Captcha
/* css_inc GetestCaptcha */

//css_inc ShortLinkUtilitiesV2


public class IndexBitcoinSript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("http://indexbitco.in/")
            {
                new FaucetSetting(){Name="User",Display="Username/Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="UseSolvemedia",Display="UseSolvemedia",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="ClaimFaucet",Display="ClaimFaucet",Type=EditorType.CheckBox,Default=false},
                new FaucetSetting(){Name="AutoSurfAds",Display="AutoSurfAds",Type=EditorType.CheckBox,Default=false},
				//new FaucetSetting(){Name="AutoSurfAds_ClaimsNumber",Display="AutoSurfAds_ClaimsNumber",Type=EditorType.TextBox,Default=3},


                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }



//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
		ad=false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "IndexBitcoin";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //strong[contains(text(),'You have successfully claimed ')]
        FailXPath = "//*"; //font[@color='red']//b[contains(text(),'Error')]

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//


//======//
//DoInit
//======//
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }
//======//
//DoInit
//======//




//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[@href='logout']") != null;
    }

//==================//
//save Login Cookies 
//==================//




//===========//
//BeforeLogin
//===========//
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//===========//
//BeforeLogin
//===========//


//=======//
//DoLogin
//=======//
    public override int DoLogin()
    {
        if(Driver.Url!= "http://indexbitco.in/login")
        {
            GoToUrl("http://indexbitco.in/login");
        }
        Wait(1);
        var UserBox = ElementByXPath("//input[@placeholder='Email or Username']");
        if (!IsVisible(UserBox))
        {
            return Fail("Fail user box is not visible");
        }
        SetText(UserBox, GetSetting("User"));
        var PasswordBox = ElementByXPath("//input[@placeholder='Password']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Fail password box is not visible");
        }
        SetText(PasswordBox, GetPassword("Pass"));
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }
        var ButtonLogin = ElementByXPath("//input[@id='sign-in']");
        if (!IsVisible(ButtonLogin))
        {
            return Fail("Button login is not visible");
        }
        Click(ButtonLogin);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }
//=======//
//DoLogin
//=======//


//==========//
//AfterLogin
//==========//
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
//==========//
//AfterLogin
//==========//
	
	
    private bool ad;
	
	
//===============//
//GetFaucetWaitTime
//===============//
    public override int GetFaucetWaitTime()
    {
	   
        if (ad)
        {
        Driver.Close();  // Close specific chrome window
        Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
        Driver.Dispose();  // Close the chromedriver.exe
		ad=false; //solve the problem in start - after he return to script again
        return GetWaitSetting();	
        }
		
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//===============//
//GetFaucetWaitTime
//===============//



    public override int BeforeSolveCaptcha()
    {
       
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }



    public override int DoSolveCaptcha()
    {
        if (Driver.Url.Contains("indexbitco.in"))
        {
            if (GetBoolSetting("UseSolvemedia"))
            {
                var SwitchSolvemedia = ElementByXPath("//li[contains(text(),'SolveMedia') and not(contains(@class,'active'))]");
                if (IsVisible(SwitchSolvemedia))
                {
                    Click(SwitchSolvemedia);
                    Wait(1);
                }
            }
            else
            {
                var SwitchRecaptcha = ElementByXPath("//li[contains(text(),'Google Recaptcha') and not(contains(@class,'active'))]");
                if (IsVisible(SwitchRecaptcha))
                {
                    Click(SwitchRecaptcha);
                    Wait(1);
                }
            }
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }




    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }


    public override int BeforeSolveFaucet()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


//============//
//DoSolveFaucet
//============//
    public override int DoSolveFaucet()
    {
		

	   //============//
	   //ClaimFaucet//
	   //============//
       if (GetBoolSetting("ClaimFaucet"))
       {

          GoToUrl("http://indexbitco.in/faucet");
          Wait();
		  Log("ClaimFaucet - go to");
		  
          var ButtonGo = ElementByXPath("//input[@value='Claim!']");
          if (IsVisible(ButtonGo))
          {
            Click(ButtonGo);
		  	Log("ButtonGo");
          }
		  
	      Wait();

          Captcha_All_Function(); //call
		  
	      Wait();

          var Error = ElementByXPath("//font[@color='red']//b[contains(text(),'Error')]");
          if (IsVisible(Error))
          {
              Log(Error.Text);
          }
		  
       }
	   //============// 
	   
	   

	   //============//
	   //AutoSurfAds//
	   //============//
	
        if (GetBoolSetting("AutoSurfAds"))
        {

            GoToUrl("http://indexbitco.in/ptc");
            Wait(2);
		    Log("AutoSurfAds - go to");

            //if No ad available
            var SurfAdsGeneralTextCheck = ElementByXPath("//h1/b[contains(text(),'No ad available!')]  | //p/strong[contains(text(),'No ads are available right now')]");
            if (IsVisible(SurfAdsGeneralTextCheck))
            {
                GoToUrl("http://indexbitco.in/dashboard");
                Wait();

                var BalanceInfo = ElementByXPath("//div[@class='col-md-12 p-4 amk_dashboard_box amk_blue']/p");
                if (IsVisible(BalanceInfo))
                {
                    Log("Balance Info - " + BalanceInfo.Text);
                }
				
                Wait();

                Driver.Close();  // Close specific chrome window
                Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
                Driver.Dispose();  // Close the chromedriver.exe
                return GetWaitSetting();
            }

            var BtnSuccessStartAd = ElementByXPath("//button[@class='btn btn-primary start-btn']  | //button[@class='btn btn-success start-btn'] "); 
            while (IsVisible(BtnSuccessStartAd)){

                try
                {
                    var BadgeSuccess = ElementByXPath("//h5[@class='badge badge-success']");
                    if (IsVisible(BadgeSuccess))
                    {
                        Log("Seeing another ad.... " + BadgeSuccess.Text);
                    }
                    CheckForPopupsEnabled = false;
                    Click(BtnSuccessStartAd, false);
                    System.Threading.Thread.Sleep(3000);
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    Wait(3);
                    DateTime Timeout = DateTime.Now.AddSeconds(60);
                    var Timer = ElementByXPath("//span[@id='timer']");

                    while (IsVisible(Timer) && DateTime.Now <= Timeout)
                    {                       
                        Wait();
                        Timer = ElementByXPath("//span[@id='timer']");
						
						var NoBAL = ElementByXPath("//h1/b[contains(text(),'No ad available!')]  | //p/strong[contains(text(),'No ads are available right now')]");
                        if (IsVisible(NoBAL))
                        {	
			               Log("spins 0 break");				
                           //break; //if the count of "spins" is 0	
				           ClaimSuccess(); //Marks the claim as a success
						   
                           Driver.Close();
                           Driver.Quit();
                           Driver.Dispose();
                           return 1*60;    				   
			            }	
						
                    }

                    Wait();
                }
                finally
                {
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                   
                    Wait(2);
                    BtnSuccessStartAd = ElementByXPath("//button[@class='btn btn-primary start-btn']  | //button[@class='btn btn-success start-btn'] ");
                }
            }

        } //end AutoSurfAds
	   //============// 


        return Time_Function();
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
//============//
//DoSolveFaucet
//============//



//===============//
//AfterSolveFaucet
//===============//
    public override int AfterSolveFaucet()
    {
 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
//===============//
//AfterSolveFaucet
//===============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	



        //=================//
        //Time_Function
        //=================//
        public int Time_Function()
        {

           //site time with date - example 10:00 PM | 10:00 AM  OR UTC LocalTime
           var CheckAvailableGeneral = ElementByXPath("//div[contains(@id,'result') and contains(text(),'wait') or contains(text(),'UTC') ]");
           if (IsVisible(CheckAvailableGeneral))
           {
	         Log("ParseExact - here - check ");   
			 
	         var XpathTimeVAR = ElementByXPath("//div[contains(@class,'fqakeD')]/span[1]/span");
			 if (IsVisible(XpathTimeVAR))
             {
	           Log("XpathTimeVAR - Element - LocalTime - Visible - return to site time"); 
			   
	           var TimeVAR = DateTime.ParseExact(XpathTimeVAR.Text.Trim(),"t", new CultureInfo("en-US") ); //AM-PM -- t = Short time pattern - for all info here: predefined formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings  | custom formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings			  			   
	           //var TimeVAR = DateTime.ParseExact(XpathTimeVAR.Text.Trim(),"yyyy-MM-dd HH:mm:ss", new CultureInfo("en-US") ).ToLocalTime(); //UTC -- yyyy-MM-dd HH:mm:ss =  LocalTime - for all info here: predefined formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings  | custom formats: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings			  
	           //return (int)((TimeVAR - DateTime.Now).TotalSeconds);
			   
               var TimeNode = (int)((TimeVAR - DateTime.Now).TotalSeconds);
               return TimeNode>0 ? TimeNode : GetWaitSetting();  //in case the "ParseExact" fails it will go to "GetWaitSetting"
		     }
			 
			 if (!IsVisible(XpathTimeVAR))
             {
	           Log("XpathTimeVAR - Element - LocalTime - NOT Visible");  
		     }
			 
           } //end CheckAvailableGeneral

			 
		   //site time with normal counter
           var MinVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[2]/span[1]") ;
		   var SecVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[3]/span[1]") ;

           if (IsVisible(MinVar))
           {
	         Log("Time_Function - WaitTimerText apper - return to site time"); 
             int min,sec;
             min = Convert.ToInt32(MinVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[0])*60;
             sec = Convert.ToInt32(SecVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[1]);
             return min+sec;
           } 

           if (!IsVisible(MinVar))
           {
	            Log("Time_Function - return to your time"); 
		        return GetWaitSetting();
           }

	       Log("Time_Function - return to your time - backup general"); 
		   return GetWaitSetting(); //backup general

           return 0;		
        }//end Time_Function
        //=================//


        //=================//
       //Captcha_All_Function
        //=================//

        public int Captcha_All_Function()
        {
			
          /*
          //CaptchaChoose
          var dropdown = ElementByXPath("//select[contains(@name,'captcha_type')]");
          if ( GetBoolSetting("CaptchaChoose") )
          {
              SelectOptionByValue(dropdown , "1"); //SolveMedia
          }
          if ( !GetBoolSetting("CaptchaChoose") )
          {
              SelectOptionByValue(dropdown , "0"); //ReCaptcha
          }
          */	
		  
          //DoSolveImageCaptcha
          var SolveMedia = ElementByXPath ("//img[contains(@id,'adcopy-puzzle-image-image')]"); 
          if (IsVisible(SolveMedia))
		  {  
            Log("DO SolveMedia");	  
	        var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"),ElementByXPath("//input[@name='adcopy_response']")); 
            if (result_2 > 0)
            {
                return Fail("SolveMedia - Fail solving captcha");
            }
		  }

          /*
          var SolveMedia_Iframe_Animation_OR_Canvas = ElementByXPath ("//div[contains(@id,'adcopy-puzzle-image-image')] | //canvas[contains(@id,'slog')] ");
          if (IsVisible(SolveMedia_Iframe_Animation_OR_Canvas))
          {
            Log("SolveMedia_Iframe_Animation_OR_Canvas - visible - we select ReCaptcha - for protection");
		    SelectOptionByValue(dropdown , "0"); //Choose to slolve with ReCaptcha - select ReCaptcha
		  }
          */
		  
	     //for recaptcha popup after click on button - ("//div[contains(@style,'opacity: 1')]//iframe[contains(@src,'recaptcha')]")   
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 
          if (IsVisible(RecaptchaOpen_Iframe))
		  {
            //SolveCaptcha if apper
            Log("DO Recaptcha");	  
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Recaptcha - Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		  }

          //HCaptcha
		  var HCaptcha_Check = ElementByXPath("//iframe[contains(@src,'hcaptcha.com/captcha')]");	
	      if (IsVisible(HCaptcha_Check))
	      {	
            var result=DoHCaptcha();
            if ( result>0 )
            {
                return result;
            }
		  }

          //IconCaptcha
          FaucetCollector.Captcha.IconCaptchaSolver solver = new FaucetCollector.Captcha.IconCaptchaSolver(this); //call
		  
          if (solver.IsVisibleIconCaptcha())
          {
              Log("IconCaptcha - here");
			  Wait(6);
              bool success = solver.DoSolve();
              if (success)
              {
                  var IconCaptcha_Success = ElementByXPath("//div[@class='captcha-modal__icons-title' and contains(text(),'Great')]");
                  if (IsVisible(IconCaptcha_Success))
                  {
                      Log("IconCaptcha - Success_Claim ");
                      //ClaimSuccess(); //Marks the claim as a success
                  }
              }
          }

          //Geetest - Captcha	
          /*		
          var Geetest_OLD_OR_NEW = ElementByXPath("//script[contains(@src,'static.geetest.com/static/js/slide') or contains(@src,'static.geetest.com/static/js/fullpage')]"); // slide OLD or fullpage NEW
          if (Geetest_OLD_OR_NEW != null) //visible
          {
            GetestCaptchaUtilities.GetestCaptcha getestCaptcha = new GetestCaptchaUtilities.GetestCaptcha(this); 
            bool res2 = getestCaptcha.DoInitSolve(); //call
          }
          */

		return 0;
        }//end Captcha_All_Function
        //=================//	


	
} //end class
