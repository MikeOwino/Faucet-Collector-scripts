using FaucetCollector.Captcha;
using FaucetCollector.Script;

using OpenQA.Selenium;

using System;
using System.Collections.Generic;
using System.Linq;
//css_ref FaucetCollector.FaucetTemplates
//css_ref FaucetCollector.Utilities
class RollerCoin : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {

            return new FaucetSettings("https://rollercoin.com")
         {
            new FaucetSetting()
            {
                Name="User",
                Type=EditorType.TextBox,
                Required=true,
                Display="Email"
            },
            new FaucetSetting()
            {
                Name="Pass",
                Type=EditorType.Password,
                Required=true,
                Display="Password"
            },
            new FaucetSetting ( )
            {
                Name="Game",
                Type=EditorType.ComboBox,
                Items=ListOfGames,
                Default=ListOfGames.FirstOrDefault()

            }
        };
        }
    }

    //Available Games
    public enum Games
    {
        Coins_2048,
    }

    public override void Start()
    {
        Title = "Rollercoin";

        SuccessXPath = "//div[@class='react-responsive-spritesheet-container__move']";
        FailXPath = "//*[contains(@text(),'THE CAPTCHA CODE YOU ENTERED')]";

        base.Start();
    }
    // Get List of games.
    public List<string> ListOfGames
    {
        get
        {
            return Enum.GetNames(typeof(Games)).ToList();
        }
    }

    public override string GetHCaptchaSiteKey()
    {
        var hcaptchaIframe = ElementByXPath("//iframe[contains(@src,'hcaptcha.com/captcha')]");

        if (hcaptchaIframe != null)
        {
            string src = hcaptchaIframe.GetAttribute("src");

            if (!string.IsNullOrEmpty(src))
            {
                // we find the sitekey 
                var queryParams = src.Split('&').ToList();
                // we remove the host part 

                queryParams.RemoveAt(0);

                //we find the sitekey 

                string siteKey = queryParams.FirstOrDefault(param => param.ToLower().Contains("sitekey")).Split('=').LastOrDefault();


                return siteKey;

            }
        }

        return base.GetHCaptchaSiteKey();
    }

    public override bool SetHCaptchaResponse(string response)
    {


        if (ElementByXPath("//*[@name='g-recaptcha-response']") != null)
        {
            ExecuteScript("document.querySelector('[name=g-recaptcha-response]').innerText = '" + response + "'");
        }
        if (ElementByXPath("//*[@name='h-captcha-response']") != null)
        {
            ExecuteScript("document.querySelector('[name=h-captcha-response]').innerText = '" + response + "'");

        }

        var hcaptchaIframe = ElementByXPath("//iframe[contains(@src,'hcaptcha.com/captcha')]");

        if (hcaptchaIframe != null)
        {
            ExecuteScript("arguments[0].setAttribute('data-hcaptcha-response','" + response + "');", hcaptchaIframe);
        }

        return true;
    }
    public override int DoLogin()
    {
        GoToUrl("https://rollercoin.com/sign-in");
        Wait(1);

        FaucetCollector.Utilities.CloudFlareUtilities cloudUtils = new FaucetCollector.Utilities.CloudFlareUtilities(this);
        cloudUtils.DoSolve();
        Wait(1);

        var UserBox = ElementByXPath("//input[@id='mail']");
        if (!IsVisible(UserBox))
        {
            return Fail("User box not visible");
        }

        var PasswordBox = ElementByXPath("//input[@id='password']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password box is not visible");
        }

        var ButtonLogin = ElementByXPath("//button[@class='btn btn-default-btn w-100']");
        if (!IsVisible(ButtonLogin))
        {
            return Fail("Button login is not visible");
        }
        SetText(UserBox, GetSetting("User"));
        SetText(PasswordBox, GetPassword("Pass"));

        var result = DoSolveCaptcha();
        if (result>0)
        {
            return result; 
        }

        var KeepSigned = ElementByXPath("//label[@for='keepSigned']");
        if (IsVisible(KeepSigned))
        {
            Click(KeepSigned);
            Wait(1);
        }

        Click(ButtonLogin);

        Wait(1);

        var Error = ElementByXPath("//p[@class='danger-text wrong-mail-error error-text']");
        if (IsVisible(Error))
        {
            Log(Error.Text);
            if (Error.Text.Contains("find user with password"))
            {
                Disable();
                return Fail("You need to put correctly your credentials");
            }
        }
        return base.DoLogin();
    }

    public override bool IsLoggedIn()
    {
        return ElementByXPath("//a[@href='/exit']") != null;
    }

    //private const string XPathCoins2048="//img[contains(@src,'/static/img/gamePreview/7-small.png')]";
    //private const string XPathCoinFlip="//img[contains(@src,'/static/img/gamePreview/8-small.png')]";

    public int FindGamePosition(Games game)
    {
        var Elements = ElementsByXPath("//p[@class='game-title']");
        if (Elements.Count > 0)
        {
            return Elements.IndexOf(Elements.FirstOrDefault(x => x.Text.ToLower().Contains((game).ToString().ToLower())));

        }

        return -1;


    }
    public IWebElement GetSpecificElement(Games game)
    {
        int Position = FindGamePosition(game);
        var Buttons = ElementsByXPath("//button[@class='tree-dimensional-button btn-cyan w-100']");
        if (Position >= 0 && (Buttons.Count - 1) >= Position)
        {
            return Buttons[Position];
        }
        return Buttons[7];
    }
    public override int BeforeSolveFaucet()
    {
        var ButtonAcceptCookies = ElementByXPath("//button[@class='qc-cmp-button' and contains(text(),'I ACCEPT')]");
        if (IsVisible(ButtonAcceptCookies))
        {
            Click(ButtonAcceptCookies);
            Wait();
        }
        TryClickOnEnergyButton();

        return base.BeforeSolveFaucet();
    }

    public override int DoSolveCaptcha()
    {
        GetestCaptcha getestCaptchaSolver = new GetestCaptcha(this);
        if (getestCaptchaSolver.IsVisibleGeetest())
        {
            return getestCaptchaSolver.DoInitSolve() ? 0 : 1;
        }
        else
        {
            RecaptchaUtility utility = new RecaptchaUtility(this);

            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return result;
            }
            utility.DoSolve();


            return result;
        }
    }
    public override int DoSolveFaucet()
    {

        var gamesButton = ElementByXPath("//a[contains(@class,'games-button')]");
        if (IsVisible(gamesButton))
        {
            Click
                (gamesButton);
        }
        else
        {
            GoToUrl("https://rollercoin.com/game/choose_game");
        }

        Wait(1, 2);


        var GameSelected = (Games)Enum.Parse(typeof(Games), GetSetting("Game"));
        Wait(5);
        //var GameElem=GetSpecificElement(GameSelected);
        var GameElem = ElementByXPath("//div[7]//div[1]//div[2]//div[2]//div[2]//button[1]");
        if (IsVisible(GameElem))
        {


            Click(GameElem);
            Wait();

            CheckForCaptchaModal();

            Wait();
            if (GameSelected == Games.Coins_2048)
            {
                FaucetCollector.FaucetTemplates.RollerCoinTemplate template = new FaucetCollector.FaucetTemplates.RollerCoinTemplate(this);
                template.Play2048Coins();

            }

            Wait(15, 20);


            var captchaResult =CheckForCaptchaModal();

            if (!captchaResult)
            {
                return Fail("There is a problem solving captcha"); 
            }

            Log("Game successfully played");
            IsSuccess = true;
            ClaimSuccess();

            return GetWaitSetting();




        }


        return base.DoSolveFaucet();
    }

    private bool CheckForCaptchaModal()
    {
        var captchaModalBody = ElementByXPath("//div[@class='captcha-body modal-body']");
        if (IsVisible(captchaModalBody))
        {
            var result = DoSolveCaptcha();
            if (result > 0)
            {
                return false;
            }
            Wait(5, 10);

        }
        return true;
        
    }
    private void TryClickOnEnergyButton()
    {
        var rechargeButton = ElementByXPath("//button[contains(@class,'electricity-recharge-btn')]|//button[contains(@id,'recharge-btn')]");

        if(IsVisible(rechargeButton) && rechargeButton.Enabled)
        {
            Click(rechargeButton);
            Log("Clicking on " + rechargeButton.Text);
            Wait(1, 2);
        }
    }



}

