
//==================//
//script Written by: ••AviramDayan•• 14/03/2021 05:00AM - Version 1
//Last Update: 26/03/2021 09:00AM - Version 2
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using System.Text.RegularExpressions;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Drawing;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Globalization;

//css_ref FaucetCollector.Utilities
//css_inc RecaptchaUtilities

public class graviex : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://graviex.net/faucets/list")
            {
				
                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Your Password",Type=EditorType.TextBox,Required=true},			
			
                new FaucetSetting() { Name = "FaucetCollect", Display = "FaucetCollect - Auto Collect all coins every 24h - about 60+ tokens", Type = EditorType.CheckBox, Default = true},																		
                new FaucetSetting(){Name="CustomWaitForCode",Display="Custom Wait For Code in Login - in sec (Email Code OR 2FA Code) ",Type=EditorType.Numeric,Default=60},

            };
        }
    }
	
	


//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "graviex.net";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath ="//*";
        FailXPath = "//*";  //*[text()='']
		
        //TimerIsCountingUp = true;

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//


    bool ad; //custom bool

    public override int DoInit()
    {


        //Let Faucet Collector continue.
        return base.DoInit();
    }



//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //if the Logout apper
        return ElementByXPath("//a[contains(@href,'logout') or contains(@href,'signout') ]") != null;

        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//
	

	
//=============//
//BeforeLogin 
//=============//
 public override int BeforeLogin()
 {
 
 
   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.BeforeLogin();
 }
//=============//
//BeforeLogin 
//=============//
	
	
	
//==============//
//start DoLogin
//==============//
 public override int DoLogin()
 {
	 Wait(15);
	 var LoginVar = ElementByXPath("//a[contains(@href,'logout') or contains(@href,'signout') ]"); //Login

     if (!IsVisible(LoginVar))
     {	
 	    // go to login page
		var FlareCheck = ElementByXPath("//a[contains(text(),'CloudFlare')] | //a[contains(text(),'Cloudflare')] | //a[contains(text(),'cloudflare')]");
		if (FlareCheck !=null)
		{
			Log("Waiting / Solving CloudFlare ... Hold on" );
			FaucetCollector.Utilities.CloudFlareUtilities cloudUtils = new FaucetCollector.Utilities.CloudFlareUtilities(this);
			cloudUtils.DoSolve();
		}

        Wait(3);
	    Log("Login: go to login page");
	    GoToUrl("https://graviex.net/signin");	
	    Wait();		
	    Wait(15);
				
	    var UserNameVar = ElementByXPath("//input[contains(@id,'email')]");
        Log("Login: set Email");
        SetText(UserNameVar, GetSetting("Email"));
		
	    Wait(2);
				
	    var PasswordVar = ElementByXPath("//input[contains(@id,'password')]");
        Log("Login: set Password");
        SetText(PasswordVar, GetSetting("Password"));
		
		Wait(2);			
		
        Recaptcha_Function(); // call to solve
		
	    Wait(2);

		//login button
        var LoginButton1 = ElementByXPath("//input[contains(@type,'submit')]");
        Log("Login: Login Button 1");	
        Click(LoginButton1);

        var EmailCode = ElementByXPath("//input[@id='two_factor_otp']"); 
        if (IsVisible(EmailCode))
        {		
		  Log("Login: we waiting " + GetSetting("CustomWaitForCode") + " sec - Please enter the code that sent to your email OR 2FA " + GetSetting("Email") );			  
          int MyCustomTimeINT;
          MyCustomTimeINT = GetIntSetting("CustomWaitForCode"); 
          Wait(MyCustomTimeINT);
        }	
		
	    Wait();	
		
     }//end LoginVar
 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
 }

//==============//
//start DoLogin
//==============//
	

	
//==============//
//start AfterLogin
//==============//
 public override int AfterLogin()
 {

 
    //This faucet has nothing to do here. We will let Faucet Collector handle it.
    return base.AfterLogin();
 }
	
//==============//
//start AfterLogin
//==============//	
	

	
//=============//
//GetFaucetWaitTime
//=============//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
		ad=false; //solve the problem in start - after he return to script again
        return GetWaitSetting();	
        }
		
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//=============//
//GetFaucetWaitTime
//=============//
	
	
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	

//================//	
//BeforeSolveCaptcha
//================//	
    public override int BeforeSolveFaucet()
    {
		

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
//================//	
//BeforeSolveCaptcha
//================//	


//=============//	
//DoSolveFaucet
//=============//
 public override int DoSolveFaucet()
 {

     //============//
    //FaucetCollect
    //=============//
    if (GetBoolSetting("FaucetCollect"))
    { 
		var FlareCheck = ElementByXPath("//a[contains(text(),'CloudFlare')] | //a[contains(text(),'Cloudflare')] | //a[contains(text(),'cloudflare')]");
		if (FlareCheck !=null)
		{
			Log("Waiting / Solving CloudFlare ... Hold on" );
			FaucetCollector.Utilities.CloudFlareUtilities cloudUtils = new FaucetCollector.Utilities.CloudFlareUtilities(this);
			cloudUtils.DoSolve();
		}

        Wait(3);
		//go to faucet
        GoToUrl("https://graviex.net/faucets/list");
		Log("FaucetCollect: Collect All" );
	    Wait();		
	    Wait(5);	
          
		
        var TimeToWaitForBreak = DateTime.Now.AddSeconds(360);
        while (true)
        {

          var FaucetCheck = ElementByXPath("//a[contains(text(),'Take')] | //a[contains(text(),'take')]");
          if (FaucetCheck !=null) //Visible
          {
        
            Wait(5);
        
            //Click(FaucetCheck);
			Get_Tag_Numbers_OR_Specific_Function(); //call
            Log("FaucetCheck - click");
        
            Wait(3);
 
            var PopUpWindow = ElementByXPath("//div[@class='modal fade in']");
            if (IsVisible(PopUpWindow))
            {
              Log("PopUpWindow - visible");		  
			  
			  Wait(2);	
			  
		      Recaptcha_Function(); //call to check
			  
              var ClaimInside = ElementByXPath("//div[@class='modal fade in']//button[contains(@class,'btn-default')]");
              if (IsVisible(ClaimInside))
              {
		      Log("ClaimInside - visible");
              Click(ClaimInside);
			  }
			  
			  Wait(2);
			 
			}
 
            var SuccessMessage = ElementByXPath("//div[@class='flash-message']//div[contains(@class,'alert-success')]");
            if (IsVisible(SuccessMessage))
            {
            Log(SuccessMessage.Text);
            ClaimSuccess(); //Success
            }
        
            Driver.Navigate().Refresh();
            Wait(4);
        
          }// end FaucetCheck
        
          if (FaucetCheck ==null) //NOT Visible
          {
          Log("FaucetClaim - break - not Available");
          break;
          }
        
          if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
          {
          Log("FaucetClaim - break - TimeToWaitForBreak");
          break; //break the wait loop
          }
        
        } //end while true	
	
    } // end FaucetCollect
    //=============//

	
    Wait();

    return Time_Function();

   
   //We are good to continue
   return base.DoSolveFaucet();
 }
 
//=============//	
//DoSolveFaucet
//=============//
 
	
//===============//
//AfterSolveFaucet
//===============//
 public override int AfterSolveFaucet()
 {
  
  //Let Faucet Collector continue
  return base.AfterSolveFaucet();
	
 }
//===============//
//AfterSolveFaucet
//===============//


    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
 


//=================//
//Get_Tag_Numbers_OR_Specific_Function
//=================//
public int Get_Tag_Numbers_OR_Specific_Function()
{
	
  //Get "Specific" Tag Number from all index (Length)
  var All_Elements = ElementsByXPath("//a");
  var Clicked_Exist_Element = All_Elements.FirstOrDefault
  (MyAllVars => 
  {
  Log("Found all buttons: " + MyAllVars.Text);
  return string.Equals(MyAllVars.Text.Trim(), "Take", StringComparison.OrdinalIgnoreCase); //mean - //a[contains(text(),'take')]
  }
  );
  
  if (Clicked_Exist_Element !=null ) 
  {          
    var index = All_Elements.IndexOf(Clicked_Exist_Element) +1;  //+1 - Because the index/all length, starts from 0 .     
    Log("Clicked on button with index " + index.ToString() + " and button contains text - " + Clicked_Exist_Element.Text ); 
    Click(Clicked_Exist_Element );
  }
  //=================//	
  
  //Get All (Tag Numbers) - Length from index 
  var AllTagNumbers = ElementsByXPath("//a[contains(text(),'Take')] | //a[contains(text(),'take')]").Count(); //Elements     
  Log("All Tag Numbers - Length from index Now is: " + AllTagNumbers.ToString() );    //ToString  |  NOTE: if we want to add +1 for some reason that index (All Length) start with 0 - so do --->  Log( (TagNumber+1).ToString() );
  //=================//	

return 0;
}//end Get_Tag_Numbers_OR_Specific_Function
//=================//	


        //=================//
       //Time_Function
        //=================//
        public int Time_Function()
        {
			
           var MinVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[2]/span[1]") ;
		   var SecVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[3]/span[1]") ;

           if (IsVisible(MinVar))
           {
	         Log("ClaimBTC - WaitTimerText apper - return to site time"); 
             int min,sec;
             min = Convert.ToInt32(MinVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[0])*60;
             sec = Convert.ToInt32(SecVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[1]);
             return min+sec;
           } 

           if (!IsVisible(MinVar))
           {
	            Log("ClaimBTC - return to your time"); 
		        return GetWaitSetting();
           }

           return 0;		
        }//end Time_Function
        //=================//	

	
        //=================//
       //Recaptcha_Function
        //=================//

        public int Recaptcha_Function()
        {

          //DifferentImageCaptcha
          var DifferentImageCaptcha_Faucet = ElementByXPath("//div[@class='modal fade in']//img[contains(@alt,'captcha')]"); 	  
          var DifferentImageCaptcha_Login = ElementByXPath("//div[@id='content']//img[contains(@alt,'captcha')]"); 
          if (IsVisible(DifferentImageCaptcha_Faucet) || IsVisible(DifferentImageCaptcha_Login) )
		  {  
            Log("DO DifferentImageCaptcha");	  
	        var result_3 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@alt,'captcha')]"),ElementByXPath("//input[contains(@class,'control') and @id='captcha' ]") ); 
		  }
			
          //DoSolveImageCaptcha
          var SolveMedia = ElementByXPath ("//img[contains(@id,'adcopy-puzzle-image-image')]"); 
          if (IsVisible(SolveMedia))
		  {  
            Log("DO SolveMedia");	  
	        var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"),ElementByXPath("//input[@name='adcopy_response']")); 
		  }
		  
	     //for recaptcha popup after click on button - ("//button[contains(@class,'reload')] | //button[contains(@id,'reload')] ")
          var RecaptchaFaucet = ElementByXPath("//div[@class='modal fade in']//iframe"); 
          var RecaptchaLogin = ElementByXPath("//div[@id='page-inner']//iframe"); 

          if (IsVisible(RecaptchaFaucet) || IsVisible(RecaptchaLogin) )
		  {
            //SolveCaptcha if apper
            Log("DO Recaptcha");	  
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		  }

		return 0;
        }//end Recaptcha_Function
        //=================//	
 
 
} //END public class 
