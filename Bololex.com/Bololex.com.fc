
//==================//
//script Written by: ••AviramDayan•• 14/08/2020 11:00AM - Version 1
//Last Update: 29/03/2021 02:00AM - Version 6
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Drawing;
using System.Threading.Tasks;
using System.Collections.Generic;

//css_inc ShortLinkUtilities
//css_ref FaucetCollector.Utilities
//css_inc RecaptchaUtilities
//css_inc AntiBotLinksUtility
//css_ref ImageProcessing
//css_ref ProcessingImagesUsingLockBits
//css_inc GetestCaptcha


public class Bololex : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://Bololex.com")
            {
                new FaucetSetting(){Name="Email",Display="UserName",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
				
                new FaucetSetting(){Name="FaucetCollect",Display="FaucetCollect - ON/OFF - note: before you can use that feature you need to do trade only 'one' time (you can use BOLO) and after you can do claim always. ",Type=EditorType.CheckBox,Default=false},
                new FaucetSetting(){Name="AirDrop_Wheel",Display="AirDrop_Wheel - ON/OFF ",Type=EditorType.CheckBox,Default=true},	
                new FaucetSetting(){Name="VoteAllCoin",Display="VoteAllCoin - ON/OFF - i don't recommend to do this, because it cost you some amount",Type=EditorType.CheckBox,Default=false},		
			
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }


    //My DomainName
    //string DomainName_String = "https://Bololex.com";
	//example - GoToUrl(DomainName_String);
    //==========//
	
	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
		ad=false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Bololex.com";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //*[text()='']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
	
	
	
	bool ad;
	
	
    public override int DoInit()
    {

	   
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
		return ElementByXPath("//div[@class='logout']") != null;
		//return true;
    }
//==================//
//save Login Cookies 
//==================//
	
	
	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
		
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
	
	

//========//
//DoLogin
//========//
 public override int DoLogin()
 {
	
  var ExitButton = ElementByXPath ("//div[@class='logout']"); 

  //if i NOT Login - go to Login Page
  if (!IsVisible(ExitButton))
  {

        GoToUrl("https://bololex.com/trading/sessions/signin");
        Wait();		
        Wait(2);

        var Email_VAR = ElementByXPath("//input[@id='email']");      
        if (IsVisible(Email_VAR))
        {
         SetText(Email_VAR, GetSetting("Email"));
        }
        
        Wait(2);

        var Password_VAR = ElementByXPath("//input[@id='password']");      
        if (IsVisible(Password_VAR))
        {
         SetText(Password_VAR, GetPassword("Password"));
        }
		
		Wait(4);
		
		Recaptcha_Function(); //call
		
		Wait(2);		
		
        var ButtonLog = ElementByXPath("//button/span[contains(text(),'Log in')]");  
        if (IsVisible(ButtonLog))
        {
         Click(ButtonLog);
        }
		
		Wait();		
		
  } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
	

	
	
	
	
//==========//
//AfterLogin
//=========//
 public override int AfterLogin()
 {
 
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
 }
//==========//
//AfterLogin
//=========//
	
	
	

	
//=============//
//GetFaucetWaitTime
//=============//
 public override int GetFaucetWaitTime()
 {

    if(ad)
	{
        ad=false; //solve the problem in start - after he return to script again
        return GetWaitSetting();  
    }	//end ad
		
   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
//=============//
//GetFaucetWaitTime
//=============//
	
	
	
	

    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	
	

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	


//=============//
//DoSolveFaucet
//=============//
  public override int DoSolveFaucet()
  {

    //============//
    //FaucetCollect
    //=============//
    if (GetBoolSetting("FaucetCollect"))
    { 

		//go to faucet
        GoToUrl("https://bololex.com/trading/wallets");
		Log("FaucetCollect: Collect All" );
	    Wait();		
	    Wait(5);	
		
        var TimeToWaitForBreak = DateTime.Now.AddSeconds(360);
        while (true)
        {
        
          var FaucetCheck = ElementByXPath("//span[contains(text(),'Claim')]");
          if (IsVisible(FaucetCheck))
          {
        
            Wait(5);
        
            var FaucetButton = ElementByXPath("//span[contains(text(),'Claim')]");
            Click(FaucetButton);
            Log("FaucetClaim - click");
        
            Wait(2);
        
            var SuccessMessage = ElementByXPath("//div[contains(@role,'alertdialog')]");
            if (IsVisible(SuccessMessage))
            {
            Log(SuccessMessage.Text);
            ClaimSuccess(); //Success
            }
        
            Wait(2);
        
          }// end FaucetCheck
        
          if (!IsVisible(FaucetCheck))
          {
          Log("FaucetClaim - break - not Available");
          break;
          }
        
          if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
          {
          Log("FaucetClaim - break - TimeToWaitForBreak");
          break; //break the wait loop
          }
        
        } //end while true	
	
    } // end FaucetCollect
    //=============//
	
	
      //=============//
      //VoteAllCoin
      //=============//
      if (GetBoolSetting("VoteAllCoin"))
      {

		GoToUrl("https://bololex.com/voting?order=trending");
	    Wait();
	    Wait(4);
		Log("VoteAllCoin - try");  
		
        var Energie_BAR_Check_FULL = ElementByXPath("//div[@class='energies_capsules' and contains(@style,'width:0%') ]");      
        if (!IsVisible(Energie_BAR_Check_FULL)) //if the Energie_BAR not 0% - do stuff
        { 
			var Vote_Random = ElementByXPath("//div[@class='voting_list_item voting_list_item--min']//b[contains(text(),'Vote')]");      	
            Click(Vote_Random);
			Log("VoteAllCoin - do Vote_Random - click");
        }
		  
      } //end VoteAllCoin
      //=============//	   


      //=============//
      //AirDrop_Wheel
      //=============//
      if (GetBoolSetting("AirDrop_Wheel"))
      {

		GoToUrl("https://bololex.com/game/airdrop");
	    Wait(5);
		Log("AirDrop_Wheel - try");  

        var ExitButton = ElementByXPath ("//div[@class='logout']"); 

        if (!IsVisible(ExitButton))
        {
	       Log("AirDrop_Wheel - you are NOT login - we do logout to clean the cookies - and after do login again");  

		   GoToUrl("https://bololex.com/voting?order=trending");
	       Wait(4);
		   
           var LogoutVAR = ElementByXPath("//a[contains(@href,'/logout')]"); 
           Click(LogoutVAR);
	       Wait(5);
		   
		   return 1*60;
  		} //end ExitButton not visible
		
			
        if (IsVisible(ExitButton))
        {
		  Log("AirDrop_Wheel - you are login");  

          var TimeToWaitForBreak = DateTime.Now.AddSeconds(240);
          while (true)
          {
		  
            var Energies_Available = ElementByXPath("//div[@class='energies_capsules' and contains(@style,'width:30%') or contains(@style,'width:35%') or contains(@style,'width:40%') or contains(@style,'width:45%')  or contains(@style,'width:50%') ] ");
            
		    if (!IsVisible(Energies_Available))
		    {
		      Log("AirDrop_Wheel - Energies NOT here - try next time");   
              break;
		    }
		    
		    if (IsVisible(Energies_Available))
		    {
	          Wait(6);
		  	
		      Log("AirDrop_Wheel - Energies Available - do stuff");  
		  	
              //MoveToElement ONLY - x/y mouse position click switch - good for "canvas" TagName flash/Games
              var canvas_VAR = Driver.FindElement(By.ClassName("game-canvas"));   //was  game-canvas  
              var size = canvas_VAR.Size;

			  //110%
			  Log("try - 110%");
              new Actions(Driver).MoveToElement(canvas_VAR, 370, 370).Click().Release().Perform(); //SPIN
	          Wait(7);	
              new Actions(Driver).MoveToElement(canvas_VAR, 585, 477).Click().Release().Perform(); //OK
			  //=======//
		  
			  //100%
			  Log("try - 100%");
              new Actions(Driver).MoveToElement(canvas_VAR, 415, 420).Click().Release().Perform(); //SPIN
	          Wait(7);	
              new Actions(Driver).MoveToElement(canvas_VAR, 659, 542).Click().Release().Perform(); //OK
			  //=======//

			  //90%
			  Log("try - 90%");
              new Actions(Driver).MoveToElement(canvas_VAR, 421, 416).Click().Release().Perform(); //SPIN
	          Wait(7);	
              new Actions(Driver).MoveToElement(canvas_VAR, 665, 541).Click().Release().Perform(); //OK
              //=======//

			  //80%
			  Log("try - 80%");
              new Actions(Driver).MoveToElement(canvas_VAR, 425, 416).Click().Release().Perform(); //SPIN
	          Wait(7);	
              new Actions(Driver).MoveToElement(canvas_VAR, 670, 536).Click().Release().Perform(); //OK
              //=======//
		      
	          Wait(3);
		  
		    } //end Energies_Available

            var Success_Claim = ElementByXPath("//div[@class='energies_capsules' and contains(@style,'width:0%') or contains(@style,'width:5%') or contains(@style,'width:10%') or contains(@style,'width:15%') or contains(@style,'width:20%') or contains(@style,'width:25%') ] ");
            if (IsVisible(Success_Claim))
		    {
		    Log("AirDrop_Wheel - Success_Claim ");  
		    ClaimSuccess(); //Marks the claim as a success
            break; //break the wait loop
		    }
		  
            if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
            {
            Log("AirDrop_Wheel - break - TimeToWaitForBreak");
            break; //break the wait loop
            }
		  
		  } //end while

        } //end ExitButton
		
      } //end AirDrop_Wheel
      //=============//	  

	  return Time_Function(); //call to function time
	
      //This faucet has nothing to do here. We will let Faucet Collector handle it.
      return base.DoSolveFaucet();
  }
	
	



    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
	
	
	

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	
	
        //=================//
       //Time_Function
        //=================//
        public int Time_Function()
        {
			
           var Energies_Timer_0 = ElementByXPath("//div[@class='energies_info' and contains(text()[2],'00:00:00')]");

           if (IsVisible(Energies_Timer_0))
           {
	            Log("Time_Function - have some bug in the site - we return to your time"); 
		        return GetWaitSetting();
           }			

           if (!IsVisible(Energies_Timer_0))
           {
             var MinVar = ElementByXPath("//div[@class='energies_info']");
			   
	         Log("Time_Function - WaitTimerText apper - return to site time"); 
             int min,sec;
             min = Convert.ToInt32(MinVar.Text.Trim().Split(':')[1])*60;  //Replace("m.", "")
             sec = Convert.ToInt32(MinVar.Text.Trim().Split(':')[2]);  //Replace("m.", "")
             return min+sec;
           } 


           return 0;		
        }//end Time_Function
        //=================//	
		
	
        //=================//
       //Recaptcha_Function
        //=================//

        public int Recaptcha_Function()
        {
			
          //DoSolveImageCaptcha
          var SolveMedia = ElementByXPath ("//img[contains(@id,'adcopy-puzzle-image-image')]"); 
          if (IsVisible(SolveMedia))
		  {  
            Log("DO SolveMedia");	  
	        var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"),ElementByXPath("//input[@name='adcopy_response']")); 
		  }
		  
	     //for recaptcha popup after click on button - ("//button[contains(@class,'reload')] | //button[contains(@id,'reload')] ")
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 
          if (IsVisible(RecaptchaOpen_Iframe))
		  {
            //SolveCaptcha if apper
            Log("DO Recaptcha");	  
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		  }

		return 0;
        }//end Recaptcha_Function
        //=================//	
	
	
} //public class
