

//==================//
//script Written by: ••AviramDayan•• 01/02/2020 10:30AM - Version 1
//Last Update: 21/06/2020 18:21PM - Version 1
//==================//

using FaucetCollector.Script;

using System;

//css_ref FaucetCollector.Utilities
//css_ref FaucetCollector.Captcha


public class SimpleBits : FaucetScript
{
  
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://SimpleBits.io")
            {
                new FaucetSetting(){Name="Email",Display="UserName only",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},

                new FaucetSetting(){Name="ShortLinks",Display="ShortLinks",Type=EditorType.CheckBox,Default=true},
		
            
            };
        }
    }


    //My DomainName
    //string DomainName_String = "https://SimpleBits.io";
    //example - GoToUrl(DomainName_String);
    //==========//


    //============================================================//
    //the number of "successes" in the script - when are finished  
    //============================================================//
    public override void Start()
    {
        ad = false;

        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "SimpleBits";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //*[text()='']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
    //============================================================//
    //the number of "successes" in the script - when are finished  
    //============================================================//



    bool ad;


    public override int DoInit()
    {


        //Let Faucet Collector continue.
        return base.DoInit();
    }




    //==================//
    //save Login Cookies 
    //==================//
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[contains(text(),'Logout')]") != null;
        //return true;
    }
    //==================//
    //save Login Cookies 
    //==================//





    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }




    //========//
    //DoLogin
    //========//
    public override int DoLogin()
    {

        var ExitButton = ElementByXPath("//a[contains(text(),'Logout')]");

        //if i NOT Login - go to Login Page
        if (!IsVisible(ExitButton))
        {

            GoToUrl("https://simplebits.io/login");
            Wait(2);

            var emailBox = ElementByXPath("//input[@placeholder='Username']");
            if (!IsVisible(emailBox))
            {
                return Fail("Email box not visible or not found");
            }
                SetText(emailBox, GetSetting("Email"));

            Wait(2);

            var passwordBox = ElementByXPath("//input[@type='password']");
            if (!IsVisible(passwordBox))
            {
                return Fail("Email box not visible or not found");
            }
                SetText(passwordBox, GetPassword("Password"));

         
            Recaptcha_Function(); 

            Wait(2);

            var loginBtn = ElementByXPath("//button[contains(@class,'baseBtn')]");
            if (!IsVisible(loginBtn))
            {
                Click(loginBtn);
            }

            Wait();

        } // end ExitButton


        return base.DoLogin();
    }
    //========//
    //DoLogin
    //========//






    //==========//
    //AfterLogin
    //=========//
    public override int AfterLogin()
    {


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
    //==========//
    //AfterLogin
    //=========//





    //=============//
    //GetFaucetWaitTime
    //=============//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
            ad = false; //solve the problem in start - after he return to script again
            return GetWaitSetting();
        }   //end ad

        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
    //=============//
    //GetFaucetWaitTime
    //=============//





    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }



    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }





    //=============//
    //DoSolveFaucet
    //=============//
    public override int DoSolveFaucet()
    {

        //=============//
        //ShortLinks
        //=============//
        if (GetBoolSetting("ShortLinks"))
        {

            //else go to normal login
            GoToUrl("https://simplebits.io/shortlinks");

            Wait();
            Wait(4);

            var VisitButton = ElementByXPath("//tr[contains(@draggable,'false')]//span[contains(text(),'Visit')]");
            if (IsVisible(VisitButton))
            {
                Wait(3);
                Title = "";
                Log("ShortLinks- VisitButton");
                CheckForPopupsEnabled = false; //disable	
                Click(VisitButton);
                Wait(2);
                Driver.Close();
                Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                Wait(2);
                //ShortLinkBypasser bypasser = new ShortLinkBypasser(this);	//do ShortLink
                FaucetCollector.Utilities.ShortLinkBypasser bypasser = new FaucetCollector.Utilities.ShortLinkBypasser(this);
                Wait(5);
                Log("ShortLinks - Success_Claim ");
                ClaimSuccess(); //Marks the claim as a success 
            } // end VisitButton

        } //end ShortLinks
          //=============//

        return Time_Function(); //call to function time

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
    //=============//
    //DoSolveFaucet
    //=============//






    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }




    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }



    //=================//
    //Time_Function
    //=================//
    public int Time_Function()
    {

        var MinVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[2]/span[1]");
        var SecVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[3]/span[1]");

        if (IsVisible(MinVar))
        {
            Log("ClaimBTC - WaitTimerText apper - return to site time");
            int min, sec;
            min = Convert.ToInt32(MinVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[0]) * 60;
            sec = Convert.ToInt32(SecVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[1]);
            return min + sec;
        }

        if (!IsVisible(MinVar))
        {
            Log("ClaimBTC - return to your time");
            return GetWaitSetting();
        }

        return 0;
    }//end Time_Function
     //=================//	


    //=================//
    //Recaptcha_Function
    //=================//

    public int Recaptcha_Function()
    {

        //DoSolveImageCaptcha
        var SolveMedia = ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]");
        if (IsVisible(SolveMedia))
        {
            Log("DO SolveMedia");
            var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"), ElementByXPath("//input[@name='adcopy_response']"));
        }

        //for recaptcha popup after click on button - ("//button[contains(@class,'reload')] | //button[contains(@id,'reload')] ")
        var RecaptchaOpen_Iframe = ElementByXPath("//iframe[contains(@src,'recaptcha/api2/anchor')]");
        if (IsVisible(RecaptchaOpen_Iframe))
        {
            //SolveCaptcha if apper
            Log("DO Recaptcha");
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solving captcha");
            }
            FaucetCollector.Captcha.RecaptchaUtility utility = new FaucetCollector.Captcha.RecaptchaUtility(this);
            utility.DoSolve();
        }

        return 0;
    }//end Recaptcha_Function
     //=================//	


} //public class dogeto
