
//==================//
//script Written by: ••AviramDayan•• 06/04/2020 00:15PM - Version 1
//Last Update: 25/03/2021 10:00AM - Version 5
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
//css_inc ShortLinkUtilities
//css_inc RecaptchaUtilities


public class Paradice : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://paradice.in")
            {
                new FaucetSetting(){Name="Email",Display="UserName",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
				
		        new FaucetSetting(){Name="DailyBonus",Display="DailyBonus - 7 days",Type=EditorType.CheckBox,Default=true},		             
		        new FaucetSetting(){Name="LuckySpin",Display="LuckySpin - each day ",Type=EditorType.CheckBox,Default=true},		             
                new FaucetSetting(){Name="FaucetClaim",Display="FaucetClaim - only if you have 0 in your balance",Type=EditorType.CheckBox,Default=false},	
			
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

	
	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
		ad=false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Paradice";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //*[text()='']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
	
	
	
	bool ad;
	
	
    public override int DoInit()
    {

	   
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
		return ElementByXPath("//div[@class='dropdown'] | //ul[contains(@class,'nav-list')]//a[@href='/account']") != null;
		//return true;
    }
//==================//
//save Login Cookies 
//==================//
	
	
	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
		
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
	
	
	

//========//
//DoLogin
//========//
 public override int DoLogin()
 {
	
  var ExitButton = ElementByXPath ("//div[@class='dropdown'] | //ul[contains(@class,'nav-list')]//a[@href='/account']"); 

  //if i NOT Login - go to Login Page
  if (!IsVisible(ExitButton))
  {

        GoToUrl("https://paradice.in/?modal=sign-in");
        Wait();		
        Wait(2);

        var Email_VAR = ElementByXPath("//input[@name='username']");      
        if (IsVisible(Email_VAR))
        {
         SetText(Email_VAR, GetSetting("Email"));
        }
        
        Wait(2);

        var Password_VAR = ElementByXPath("//input[@name='password']");      
        if (IsVisible(Password_VAR))
        {
         SetText(Password_VAR, GetPassword("Password"));
        }
		
		Wait(3);		
		
        Recaptcha_Function(); //call	

		Wait(3);		
		
        var ButtonLog = ElementByXPath("//button[contains(@class,'btn btn btn-primary')]");  
        if (IsVisible(ButtonLog))
        {
         Click(ButtonLog);
        }
			
		Wait();		
		
  } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
	

	
	
	
	
//==========//
//AfterLogin
//=========//
 public override int AfterLogin()
 {
 
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
 }
//==========//
//AfterLogin
//=========//
	
	
	

	
//=============//
//GetFaucetWaitTime
//=============//
 public override int GetFaucetWaitTime()
 {

    if(ad)
	{
        ad=false; //solve the problem in start - after he return to script again
		
    }	//end ad


		
   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
//=============//
//GetFaucetWaitTime
//=============//
	
	
	
	

    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	
	

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	
	
	


//=============//
//DoSolveFaucet
//=============//
  public override int DoSolveFaucet()
  {

      //=============//
      //DailyBonus
      //=============//
      if (GetBoolSetting("DailyBonus"))
      {
        Log("DailyBonus - go to page to check");
		GoToUrl("https://paradice.in/?modal=/daily-goals"); //daily bonus page
	    Wait();
	    Wait(15);	

        Get_Button_Before_Function(); //call
		  
        var DailyBonus_Start_Check = ElementByXPath("//div[contains(@class,'daily_goal')]//span[contains(@class,'small') and contains(text(),':')]"); //check if time run

        if (IsVisible(DailyBonus_Start_Check))
        {
           Log("DailyBonus - try next time"); 

		}

        if (!IsVisible(DailyBonus_Start_Check))
        {	  		   
           var DailyBonus_Check = ElementByXPath("//button[contains(@aria-label,'Close') and contains(text(),'Close') ]"); //check
           if (IsVisible(DailyBonus_Check))
           {
            Log("DailyBonus - already received - try tomorrow");
		   }
		   
           if (!IsVisible(DailyBonus_Check))
           {
            Log("DailyBonus - Available - do stuff ");	
            var Claim_Button = ElementByXPath("//div[contains(@class,'modal-content')]//span[contains(text(),'Claim')]");
		    Click(Claim_Button);
		    Wait(10);
            var SuccessMessage = ElementByXPath("//span[contains(@class,'two')]//span");
            if (IsVisible(SuccessMessage))
            {
            Log("DailyBonus - Congratulations, You have received " + SuccessMessage.Text + " SATOSHI" );
		    ClaimSuccess(); //Marks the claim as a success	
		    Wait();			
		    }
		   }
		   
        } //end DailyBonus_Start_Check
		
      } //end DailyBonus
	  

      //=============//
      //LuckySpin
      //=============//
      if (GetBoolSetting("LuckySpin"))
      {
        Log("LuckySpin - go to page");
		GoToUrl("https://paradice.in/achievements?modal=/lucky-spin");
	    Wait();
	    Wait(15);

        Get_Button_Before_Function(); //call

        var LuckySpin_Check = ElementByXPath("//div[contains(@class,'lucky-spin')]/div[contains(@class,'next-spin text-center')]//span[contains(@class,'small')] "); //check if time run 
        if (IsVisible(LuckySpin_Check))
        {
         Log("LuckySpin - already received - try tomorrow");
		}
		
        if (!IsVisible(LuckySpin_Check))
        {
         Log("LuckySpin - Available - do stuff ");	
         var Claim_Button = ElementByXPath("//div[contains(@class,'modal-content')]//span[contains(text(),'Spin')]");
		 Click(Claim_Button);
		 Wait(10);
         var SuccessMessage = ElementByXPath("//span[contains(@class,'win-amount')]");
         if (IsVisible(SuccessMessage))
         {
         Log("LuckySpin - Congratulations, You have received " + SuccessMessage.Text);
		 ClaimSuccess(); //Marks the claim as a success
		 Wait();		 
		 }
		}
		
      } //end LuckySpin
  
	
      //=============//
      //FaucetClaim
      //=============//
      if (GetBoolSetting("FaucetClaim"))
      {
		  
        Log("FaucetClaim - go to page");
		GoToUrl("https://paradice.in/account?modal=faucet");
	    Wait();
	    Wait(10);

        var FaucetButton = ElementByXPath("//a[contains(@href,'faucet')]");
        if (IsVisible(FaucetButton))
        {
		   Log("click FaucetButton");
           Click(FaucetButton);
        } 

        var WaitTimerText = ElementByXPath("//div[contains(@class,'faucet-limit')]");
        if (IsVisible(WaitTimerText))
        {
           return Time_Function();
        } // end WaitTimerText - visible


        if (!IsVisible(WaitTimerText))
        {

		  Recaptcha_Function (); //call if apper

	      Wait();		

          var Button_Claim_Check = ElementByXPath("//button[contains(@class,'btn btn btn-primary btn-rounded btn-fw') and @disabled]");  
          if (!IsVisible(Button_Claim_Check))
		  {
  
            var Button_Claim = ElementByXPath("//button[contains(@class,'btn btn btn-primary btn-rounded btn-fw')]");  
            if (IsVisible(Button_Claim))
		    {
		    Click(Button_Claim);		
		    }
		  }
	
	      Wait(4);
		  
          var Success_Claim = ElementByXPath("//div[contains(@class,'faucet-limit')]");
          if (IsVisible(Success_Claim))
		  {
		  Log("FaucetClaim - Success_Claim ");  
		  ClaimSuccess(); //Marks the claim as a success
		  }

        } // end WaitTimerText - not visible

      } //end FaucetClaim

      return Time_Function();  
	 
	  //This faucet has nothing to do here. We will let Faucet Collector handle it.
      return base.DoSolveFaucet();
  }
	
	
	
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
	

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	
        //=================//
       //Get_Button_Before_Function
        //=================//
        public int Get_Button_Before_Function()
        {
		
          var Get_Button_Before = ElementByXPath("//div[contains(@class,'modal-content')]//span[contains(text(),'Get')]"); 
          if (IsVisible(Get_Button_Before))
          {
           Log("Get_Button_Before");
		   Click(Get_Button_Before);
		  }
		  
		return 0;
        }//end Get_Button_Before_Function
        //=================//	
	
	
        //=================//
       //Time_Function
        //=================//
        public int Time_Function()
        {

		   GoToUrl("https://paradice.in/?modal=/bonuses");
	       Wait();
	       Wait(10);	
		   
	       var TimeCheck = ElementByXPath("//div[contains(@class,'lucky_spin')]//span[contains(@class,'small') and contains(text(),':')]") ;
   
		   //site time with normal counter
           var TimeVAR = ElementByXPath("//div[contains(@class,'lucky_spin')]//span[contains(@class,'small')]") ;

           if (IsVisible(TimeCheck))
           {
	         Log("Time_Function - WaitTimerText apper - return to site time"); 
             int hour,min,sec;
             hour = Convert.ToInt32(TimeVAR.Text.Trim().Split(':')[0])*3600;
             min = Convert.ToInt32(TimeVAR.Text.Trim().Split(':')[1])*60;
             sec = Convert.ToInt32(TimeVAR.Text.Trim().Split(':')[2]);
             return hour+min+sec;
           } 

           if (!IsVisible(TimeCheck))
           {
	            Log("Time_Function - return to your time"); 
		        return GetWaitSetting();
           }

	       Log("Time_Function - return to your time - backup general"); 
		   return GetWaitSetting(); //backup general

         return 0;		
        }//end Time_Function
        //=================//	
		
	
        //=================//
       //Recaptcha_Function
        //=================//

        public int Recaptcha_Function()
        {
			
          //DoSolveImageCaptcha
          var SolveMedia = ElementByXPath ("//img[contains(@id,'adcopy-puzzle-image-image')]"); 
          if (IsVisible(SolveMedia))
		  {  
            Log("DO SolveMedia");	  
	        var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"),ElementByXPath("//input[@name='adcopy_response']")); 
            if (result_2 > 0)
            {
                return Fail("SolveMedia - Fail solving captcha");
            }
		  }
		  
	     //for recaptcha popup after click on button - ("//button[contains(@class,'reload')] | //button[contains(@id,'reload')] ")
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 
          if (IsVisible(RecaptchaOpen_Iframe))
		  {
            //SolveCaptcha if apper
            Log("DO Recaptcha");	  
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Recaptcha - Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		  }

		return 0;
        }//end Recaptcha_Function
        //=================//	
	
	
} //public class
