using FaucetCollector.Script;

using System;
using System.Linq;
//css_ref FaucetCollector.Utilities
//css_ref FaucetCollector.Captcha
public class ContractMiner : FaucetScript
{
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.contract-miner.com/")
            {

                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="UseRecaptcha",Display="Use Recaptcha",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="LoginW",Display="Login With",Type=EditorType.ComboBox,Items=new System.Collections.Generic.List<string>{"HCaptcha","Recaptcha"},Default="Recaptcha"},
                new FaucetSetting(){Name="MinerTap",Display="MinerTap",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting()
                {
                    Name="HourlyPot",Display="Hourly pot",Type=EditorType.CheckBox,Default=true
                },
                new FaucetSetting()
                {
                    Name="SaveSession",
                    Type=EditorType.CheckBox,
                    Default=true,
                    Display="Click on remember me"
                },
                new FaucetSetting()
                {
                    Name="DailyClaim",
                    Type=EditorType.CheckBox,
                    Default=true,
                    Display="Daily Claim"
                },
                new FaucetSetting()
                {
                    Name="LootBox",
                    Display="Try claim loot box",
                    Type=EditorType.CheckBox,
                    Default=false
                },
                new FaucetSetting()
                {
                    Name="CoinFlip",
                    Type=EditorType.CheckBox,
                    Display="Claim Coinflip",
                    Default=true
                },
                new FaucetSetting()
                {
                    Name="RewardPoints",
                    Type=EditorType.CheckBox,
                    Display="Claim Reward Point",
                    Default=true
                }


            };
        }
    }


    public override void Start()
    {

        Title = "Miner";

        SuccessXPath = "//div[@class='alert alert-success']";
        FailXPath = "//div[@class='alert alert-danger']";


        base.Start();
    }

    private enum CoinflipOption
    {
        Disabled,
        Heads,
        Tails
    }


    public override bool IsLoggedIn()
    {

        return ElementByXPath("//a[contains(@href,'logout')]") != null;
    }

    public void CheckDailyAd()
    {
        var btnDailyReward = ElementByXPath("//button[@name='claim_daily_rp']");
        if (IsVisible(btnDailyReward))
        {
            Log("Claiming daily reward");

            Click(btnDailyReward);
        }
    }
    public void SelectCorrectCaptcha()
    {
     
       var loginCaptchaSetting = GetSetting("LoginW");
       bool isChangeCaptchaNeeded = (loginCaptchaSetting == "Recaptcha" && !IsVisible(ElementByXPath("//iframe[contains(@src,'google.com/recaptcha')]")))
            || (loginCaptchaSetting == "HCaptcha" && !IsVisible(ElementByXPath("//div[@class='h-captcha']")));

        if (isChangeCaptchaNeeded)
        {

            var buttonSwitchCaptcha = ElementByXPath("//a[contains(@href,'captcha')]");
            if (IsVisible(buttonSwitchCaptcha))
            {
                Click(buttonSwitchCaptcha);
                Wait(2, 3);
            }
        }

    }
    public override int BeforeLogin()
    {
        var Login = ElementByXPath("//a[contains(@href,'target=login')]");
        if (IsVisible(Login))
        {
            Click(Login);
        }

        Wait(2);
        SelectCorrectCaptcha();


        return base.BeforeLogin();
    }


    public override int DoLogin()
    {
        if (!Driver.Url.Contains("https://www.contract-miner.com/?my-account=index&target=login"))
        {
            GoToUrl("https://www.contract-miner.com/?my-account=index&target=login");
        }


        var UserBox = ElementByXPath("//input[@id='username']");
        if (!IsVisible(UserBox))
        {
            return Fail("User Box is not visible");
        }
        SetText(UserBox, GetSetting("User"));
        Wait(1);
        var PasswordBox = ElementByXPath("//input[@type='password']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password box is not visible");
        }
        SetText(PasswordBox, GetPassword("Pass"));
        Wait(1);
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }
        if (GetSetting("LoginW") == "Recaptcha")
        {
            FaucetCollector.Captcha.RecaptchaUtility utility = new FaucetCollector.Captcha.RecaptchaUtility(this);
            utility.DoSolve();
        }
        if (GetBoolSetting("SaveSession"))
        {
            var KeepSign = ElementByXPath("//input[@id='stay_signed_in']");
            if (IsVisible(KeepSign))
            {
                Click(KeepSign);
            }

        }



        var LoginBtn = ElementsByXPath("//button[@id='submit']").FirstOrDefault();
        if (!IsVisible(LoginBtn))
        {
            return Fail("Button login is not visible");
        }
        Click(LoginBtn);

        var Error = ElementByXPath("//div[@class='toast-message']");
        if (IsVisible(Error))
        {
            Log(Error.Text);
        }

        return base.DoLogin();
    }




    public override int GetFaucetWaitTime()
    {

        int lowerTimer = GetLowerTimer();
        if (lowerTimer > 0)
        {
            return lowerTimer;
        }
        else if (IsSuccess)
        {
            //  We return 15 minutes , the minimum wait time if is success and something is wrong getting the settings 
            return 900;
        }


        return 0;


    }
    public int GetLowerTimer()
    {
        DateTime activedHourTime;
        DateTime actived15Timer;
        int ActivedHourWaitTime = 0;
        int Actived15WaitTime = 0;
        if (DateTime.TryParse(GetSetting("ActedHour"), out activedHourTime))
        {
            // We get the time in that we started the job from the settings
            ActivedHourWaitTime = (int)(activedHourTime.AddHours(1) - DateTime.Now).TotalSeconds;
        }
        if (DateTime.TryParse(GetSetting("Actived15"), out actived15Timer))
        {
            // We get timer from started mine
            Actived15WaitTime = (int)(actived15Timer.AddMinutes(15) - DateTime.Now).TotalSeconds;
        }
        // If Actived hour timer is biggest than actived 15 and >0  we return it 
        return (ActivedHourWaitTime >= Actived15WaitTime && ActivedHourWaitTime > 0)
            // We check if Actived 15 is >0 , return it , else we return 0
            ? ActivedHourWaitTime : Actived15WaitTime > 0 ? Actived15WaitTime : 0;


    }

    public int TryUseShortlink(int tries = 0)
    {
        if (tries > 4)
        {
            return Fail("Fail do shortlink");
        }
        var GenerateShort = ElementByXPath("//button[@id='generate_mt_end_shortener_cm']");
        if (!IsVisible(GenerateShort))
        {
            return Fail("Generate ShortLink Button is not visible");
        }
        Click(GenerateShort);
        var ButtonStay = ElementByXPath("//a[contains(text(),'Stay in same tab')]");
        DateTime t1 = DateTime.Now.AddSeconds(15);
        while (!IsVisible(ButtonStay))
        {
            ButtonStay = ElementByXPath("//a[contains(text(),'Stay in same tab')]");
            Wait(1);
            if (DateTime.Now > t1)
            {
                break;
            }
        }
        if (!IsVisible(ButtonStay))
        {
            return Fail("Go to shortLink button is not visible");
        }

        Click(ButtonStay);
        Wait();
        if (!IsVisible(ElementByXPath("//input[@id='login_username']")))
        {
            DoTheInternalShort();
            Wait(1);
        }
        else
        {
            Log("Need login again, Try login.");
            BeforeLogin();
            DoLogin();
            GoToUrl(Url);
            return TryUseShortlink(tries + 1);


        }

        return 0;
    }



    public override int DoSolveFaucet()
    {
        CheckDailyAd();

        // Daily claim area
        if (GetBoolSetting("DailyClaim"))
        {
            var claimMyReward = ElementByXPath("//button[contains(text(),'eward')] | //button[contains(@name,'claim_d')] ");
            if (IsVisible(claimMyReward))
            {
                Log("Claim daily claim");
                Click(claimMyReward);
            }
            else
            {
                Log("Daily reward not available");
            }
        }


        if (GetBoolSetting("RewardPoints"))
        {
            string urlPrefix = GetBoolSetting("UseRecaptcha") ? "recaptcha" : "hcaptcha";

            GoToUrl("https://www.contract-miner.com/index.php?captcha=" + urlPrefix);
            Wait(1, 2);
            var claimRpBtn = ElementByXPath("//button[@name='claim_rp_sub']");
            if (IsVisible(claimRpBtn))
            {
                var result = DoSolveCaptcha();
                if (result > 0)
                {
                    return result;
                }

                Click(claimRpBtn);
            }
        }

        // Miners tap area

        if (GetBoolSetting("MinerTap"))
        {
            GoToUrl("https://www.contract-miner.com/?app=miners-tap");
            Wait(1);
            var beginClaimBtn = ElementByXPath(" //button[contains(text(),'Begin Claim')]");
            if (IsVisible(beginClaimBtn))
            {
                Click(beginClaimBtn);
            }
            else if (IsVisible(ElementByXPath("//p[contains(text(),'Your claim is on cooldown. Try again later to get ')]")))
            {
                Log("Miners top is in cooldown");
            }
            else
            {


                beginClaimBtn = ElementByXPath(" //button[@id='generate_rp_shortener_cm']");
                if (IsVisible(beginClaimBtn))
                {

                    Click(beginClaimBtn);

                    var goUrl = ElementByXPath("//a[contains(@href,'auth=step')]");
                    if (IsVisible(goUrl))
                    {

                        Click(goUrl);
                        Wait();
                        DoTheInternalShort();

                    }
                }
            }



        }

        //Hourly pot claim
        if (GetBoolSetting("HourlyPot"))
        {
            GoToUrl("https://www.contract-miner.com/?app=hourly-pot");
            Wait();
            var beginClaimBtn = ElementByXPath(" //button[contains(text(),'Begin Claim')]");
            if (IsVisible(beginClaimBtn))
            {
                Click(beginClaimBtn);
            }
            else if (IsVisible(ElementByXPath("//p[contains(text(),'Your claim is on cooldown. Try again later to get ')]")))
            {
                Log("Hourly Pot is in cooldown");
            }
            else
            {
                TryUseShortlink();
                beginClaimBtn = ElementByXPath(" //button[contains(text(),'Begin Claim')]");
                if (IsVisible(beginClaimBtn))
                {

                    Click(beginClaimBtn);
                }
            }
            TryUseShortlink();
        }

        if (GetBoolSetting("LootBox"))
        {
            GoToUrl("https://www.contract-miner.com/?app=loot-box");

            Wait(2);

            var boxButtons = ElementsByXPath("//button[@name='claim_box']").Where(button => IsVisible(button)).ToList();
            if (boxButtons.Count > 0)
            {
                int MaxTries = boxButtons.Count;
                int nTrie = 0;
                while (boxButtons.Count > 0 && nTrie < MaxTries)
                {


                    Click(boxButtons[0]);
                    nTrie++;
                    Wait();
                    boxButtons = ElementsByXPath("//button[@name='claim_box']").Where(button => IsVisible(button)).ToList();
                }
            }
            else
            {
                Log("there is not a box loot to claim");
            }

            var boxOpenButtons = ElementsByXPath("//button[@name='open_box']")
                .Where(button => IsVisible(button)).ToList();
            if (boxOpenButtons.Count > 0)
            {
                int MaxTries = boxOpenButtons.Count;
                int nTrie = 0;
                while (boxOpenButtons.Count > 0 && nTrie < MaxTries)
                {
                    Click(boxOpenButtons[0]);
                    nTrie++;
                    Wait();
                    boxOpenButtons = ElementsByXPath("//button[@name='open_box']")
                .Where(button => IsVisible(button)).ToList();
                }
            }
            else
            {
                Log("there is not a box lot to open");
            }

        }

        if (GetBoolSetting("CoinFlip"))
        {
            GoToUrl("https://www.contract-miner.com/?mini-games=rp-coinflip");
            Wait();
            var coinflipClaimBtn = ElementByXPath("//button[@name='play_cf']");
            if (IsVisible(coinflipClaimBtn))
            {
                Log("Claim Coinflip");
                Click(coinflipClaimBtn);
            }
            else
            {
                Log("Coinflip is in cooldown");
            }
        }

        return GetWaitSetting();
    }

    public bool DoTheInternalShort()
    {
        bool IsSolved;

        SelectCorrectCaptcha();


        var Bypasser = new FaucetCollector.Utilities.ShortLinkBypasser(this);
        IsSolved = Bypasser.DoShortLink();



        return IsSolved;

    }
}
