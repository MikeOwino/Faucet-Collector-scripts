using FaucetCollector.Script;
//css_ref HumanActions.dll;
using HumanActions;

using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;

using System;
using System.Linq;

public class freeLitecoinScript : FaucetScript
{
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.free-litecoin.com/")
            {
                new FaucetSetting() { Name = "Email", Display = "Email Address", Type = EditorType.TextBox, Required = true },
                new FaucetSetting() { Name = "Pass", Display = "password", Type = EditorType.Password, Required = true },

            };
        }
    }

    public override void Start()
    {
        Title = "Free-Litecoin.com";

        SuccessXPath = "//h2[@id='info']";
        FailXPath = "//h1[@id='numberroll' and contains(@style, 'red')]";

        base.Start();
    }

    public override bool IsLoggedIn()
    {

        return ElementByXPath("//a[contains(@href,'logout.php')]") != null;
    }

    public override int BeforeLogin()
    {


        return base.BeforeLogin();
    }

    public override int DoLogin()
    {
        DriverHumanActions humanActions = new DriverHumanActions(Driver);
        var signInUser = ElementById("usr");
        if (!IsVisible(signInUser))
        {
            Driver.Manage().Cookies.DeleteAllCookies();
            return Fail("Email input not found.");
        }

        var signInPassword = ElementById("usr2");
        if (!IsVisible(signInPassword))
        {

            return Fail("Password input not found.");
        }

        humanActions.SetText(signInUser, GetSetting("Email"));
        Wait(1);
        humanActions.SetText(signInPassword, GetPassword("Pass"));

        var loginButton = ElementByXPath("//button[@class='btn btn-primary btn-lg']");
        if (!IsVisible(loginButton))
        {

            return Fail("Login button not found.");
        }

        Wait(1);

        //Solve the captcha
        var result = DoSolveCaptcha();
        if (result > 0)
        {

            return result;
        }

        Wait(1);


        humanActions.Click(loginButton);


        return base.DoLogin();
    }

    public void HumanClick(IWebElement element)
    {
        Actions actions = new Actions(Driver);

        actions.MoveToElement(element, element.Size.Width / 2, element.Size.Height / 2).Build().Perform();
        Wait(1);
        actions.Click().Build().Perform();

    }

    public override int AfterLogin()
    {
        var body = ElementByXPath("//body");

        Wait();
        //open the popup
        Click(body);

        return base.AfterLogin();
    }

    public override int GetFaucetWaitTime()
    {
        var timerCheck = ElementById("clock");
        if (!IsVisible(timerCheck))
        {
            //no time remaining element, so we are good to go.
            return 0;
        }

        var minutes = Convert.ToString(ExecuteScript("return $('#clock .countdown_amount')[0].innerText"));
        var seconds = Convert.ToString(ExecuteScript("return $('#clock .countdown_amount')[1].innerText"));
        if (string.IsNullOrEmpty(seconds) || string.IsNullOrEmpty(minutes))
        {
            return 0;
        }

        var min = Convert.ToInt32(minutes.Trim());
        var sec = Convert.ToInt32(seconds.Trim());
        //return the total wait time in seconds
        return (min * 60) + sec;
    }

    public override int BeforeSolveCaptcha()
    {

        return base.BeforeSolveCaptcha();
    }

    public override int DoSolveCaptcha()
    {



        if (IsVisible(ElementByXPath("//div[@class='h-captcha']")))
        {
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return result;
            }
            string captchaToken = Context.CaptchaResult.Result;
            if (string.IsNullOrEmpty(captchaToken))
            {
                return result;
            }
           
            Wait(1);
            return result;
        }

        if (ElementByXPath("//div[contains(@class,'g-recaptcha')]") == null)
        {
            return 0;
        }

        return base.DoSolveCaptcha();
    }


    public override int DoSolveFaucet()
    {

        GoToUrl("https://www.free-litecoin.com");
        Wait();
        var rollNumberBtn = ElementByXPath("//button[@id='roll']");
        if (!IsVisible(rollNumberBtn))
        {
            return Fail("Roll number not visible.");
        }

        //Solve the captcha
        var captchaResult = DoSolveCaptcha();
        if (captchaResult > 0)
        {
            return captchaResult; //if something wrong
        }
        Wait();
        Click(rollNumberBtn);

        return base.DoSolveFaucet();
    }



    public override int CheckFaucetResult()
    {
        var result = base.CheckFaucetResult();
        if (IsSuccess)
        {

            Reload = true;
        }

        return result;
    }

    public override bool SetHCaptchaResponse(string response)
    {

        CallHCaptchaCallBack(response);

        var validHCaptchaIframe = ElementsByXPath("//div[contains(@class,'h-captcha')]")
            .FirstOrDefault(hcaptchaFrame => IsVisible(hcaptchaFrame));

        SetAttributeUsingJS(validHCaptchaIframe, "data-hcaptcha-response", response);

        SetHCaptchaResponseInForm(response);

        return base.SetHCaptchaResponse(response);
    }
    private void CallHCaptchaCallBack(string captchaResult)
    {
        string callbackScript = "callbackhcaptcha('" + captchaResult + "');";
        ExecuteScript(callbackScript);
    }
    private void SetAttributeUsingJS(IWebElement source, string attributeName, string value)
    {
        if (source == null) { return; }
        ExecuteScript("arguments[0].setAttribute('" + attributeName + "','" + value + "')", source);
    }
    private void SetHCaptchaResponseInForm(string captchaResult)
    {
        bool isLoggedIn = IsLoggedIn();
        var hcaptchaFormFieldXPath = !isLoggedIn ?
            "//div[@id='loginform']//*[contains(@id,'h-captcha-response')]" :
            "//*[contains(@id,'h-captcha-response')]";

        SetValueUsingJS(ElementByXPath(hcaptchaFormFieldXPath), captchaResult);

        var recaptchaFormFieldXPath = !isLoggedIn ?
            "//div[@id='loginform']//*[contains(@id,'g-recaptcha-response')]" :
            "//*[contains(@id,'g-recaptcha-response')]";

        SetValueUsingJS(ElementByXPath(recaptchaFormFieldXPath), captchaResult);

    }

    private void SetValueUsingJS(IWebElement source, string value)
    {
        if (source == null) { return; }

        ExecuteScript("arguments[0].value='" + value + "'", source);
    }

}
